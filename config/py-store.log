2018-01-19 Friday 23:15:40  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-19 Friday 23:15:40  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 368 : INFO  Opened database successfully
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 372 : ERROR  table Admin already exists
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 378 : ERROR  table User already exists
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 384 : ERROR  table Device already exists
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 390 : ERROR  table Worker already exists
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 396 : ERROR  table dictionary already exists
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 402 : ERROR  table brand already exists
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 408 : ERROR  table model already exists
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 414 : ERROR  table Attributes already exists
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 420 : ERROR  table service already exists
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 426 : ERROR  table service_item already exists
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL
                    PRIMARY KEY
                  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 432 : ERROR  table stock_info already exists
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 438 : ERROR  table stock_detail already exists
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  VARCHAR(30),
          number      VARCHAR(10),
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10, 2),
          paid        INT(10, 2),
          total       INT,
          rela_buy_id INTEGER,
          buy_type    INT,
          notes       VARCHAR(100),
          left_number INTEGER DEFAULT 0,
          state       INT     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 444 : ERROR  table buy_info already exists
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 450 : ERROR  table payment_detail already exists
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35)    PRIMARY KEY,
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT
            )
            
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 456 : ERROR  table Sales already exists
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 462 : ERROR  table return_visit already exists
2018-01-19 Friday 23:15:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2),
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 467 : ERROR  table supplier already exists
2018-01-19 Friday 23:15:40  init_database.py.init_database.create_all_table: 470 : INFO  Table created successfully
2018-01-19 Friday 23:15:41  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-19 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-19 Friday 23:15:41  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:15:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-19 Friday 23:15:45  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:15:46  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-19 Friday 23:15:46  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-19 Friday 23:15:46  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-19 Friday 23:15:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:15:49  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:15:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-19 Friday 23:15:49  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:15:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:15:49  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:15:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-19 Friday 23:15:49  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:15:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-19 Friday 23:15:49  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:15:49  main_view.py.main_view._tab_show: 271 : INFO  add tab：normal_buy_add
2018-01-19 Friday 23:16:04  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       id,
                       supplier_name,
                       sp.unpaid
                  FROM supplier sp
                 WHERE sp.unpaid > 0.0
                 GROUP BY id, supplier_name
                 ORDER BY supplier_name
2018-01-19 Friday 23:16:04  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:16:04  main_view.py.main_view._tab_show: 271 : INFO  add tab：supplier_arrears
2018-01-19 Friday 23:17:20  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-19 Friday 23:17:20  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-19 Friday 23:17:20  init_database.py.init_database.create_all_table: 368 : INFO  Opened database successfully
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE UNIQUE INDEX userName
              ON Admin (userName);
          
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO Admin (userName,pwd,createdTime) VALUES ('admin','e93a9a6047903bd088bd4ffee28fdee8','2018-01-19 23:17:20')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX carid ON User (carId)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX ip ON Device (ip)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX dictionary_id_uindex ON dictionary (id)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (1, 1, '进货', 'buy_type')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (2, 2, '退货', 'buy_type')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (3, 0, '进货库存', 'stock_type')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (4, 1, '退货库存', 'stock_type')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (5, 2, '核增库存', 'stock_type')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (6, 3, '核减库存', 'stock_type')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (7, 4, '正库存销售', 'stock_type')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (8, 0, '已禁用', 'device_state')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (9, 1, '已启用', 'device_state')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (10, 0, '选填', 'is_required')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (11, 1, '必填', 'is_required')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (12, 8, '库存校准', 'buy_type')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (13, 5, '负库存销售', 'stock_type')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (14, 6, '已销负销售', 'stock_type')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (15, 0, '正常', 'buy_state')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (16, 1, '待审核', 'buy_state')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (17, 2, '已作废', 'buy_state')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (18, 0, '待回访', 'visit_state')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (19, 1, '已回访', 'visit_state')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (20, 1, '一级服务项目', 'service_level')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (21, 2, '二级服务项目', 'service_level')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (22, 1, '现金/转账', 'payment')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (23, 2, '信用卡', 'payment')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (24, 3, '微信', 'payment')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (25, 4, '支付宝', 'payment')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (26, 5, '支票', 'payment')
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX serviceAttribute_id_uindex ON attributes (id);
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX serviceAttribute_name_uindex ON attributes (name)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (1, '数量', 1, '2018-01-07 23:23:34', 1, 0, 1)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (2, '单价', 1, '2018-01-07 23:24:02', 1, 0, 2)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (3, '小计', 1, '2018-01-07 23:24:11', 1, 0, 3)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (4, '总价', 1, '2018-01-07 23:24:18', 1, 0, 4)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (5, '备注', 1, '2018-01-07 23:24:35', 1, 0, 5)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX father ON service (father, name)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX service_item_id_uindex ON service_item (id)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL
                    PRIMARY KEY
                  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  VARCHAR(30),
          number      VARCHAR(10),
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10, 2),
          paid        INT(10, 2),
          total       INT,
          rela_buy_id INTEGER,
          buy_type    INT,
          notes       VARCHAR(100),
          left_number INTEGER DEFAULT 0,
          state       INT     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX payment_detail_id_uindex ON payment_detail (id)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35)    PRIMARY KEY,
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT
            )
            
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX userId ON Sales (userId)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE    INDEX    sales_service_ID    ON Sales(service_id)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX sales_card_id ON Sales(carId)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX createdTime ON Sales (createdTime);
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2),
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX supplier_id_uindex ON supplier (id)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX supplier_supplier_name_uindex ON supplier (supplier_name)
2018-01-19 Friday 23:17:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:20  init_database.py.init_database.create_all_table: 470 : INFO  Table created successfully
2018-01-19 Friday 23:17:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-19 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-19 Friday 23:17:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-19 Friday 23:17:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:23  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-19 Friday 23:17:23  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-19 Friday 23:17:23  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-19 Friday 23:17:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:17:26  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:27  main_view.py.main_view._tab_show: 271 : INFO  add tab：service_manage
2018-01-19 Friday 23:17:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO service(name, createdTime, father, level) VALUES('轮胎项目','2018-01-19 23:17:40',-1,1)
2018-01-19 Friday 23:17:40  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:17:40  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:41  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:17:41  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:42  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT att.id, name, di.value_desc required_desc, is_required
                    FROM attributes att, dictionary di
                   WHERE delete_state = 0
                     AND att.is_required = di.key_id
                     AND di.group_name = 'is_required'
                    ORDER BY required_desc, display_order, name
                   
2018-01-19 Friday 23:17:42  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:50  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:17:50  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:17:50  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO service(name, createdTime, father, level) 
                VALUES('轮胎更换','2018-01-19 23:17:50',1,2)
2018-01-19 Friday 23:17:50  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:50  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,1,'数量','2018-01-19 23:17:50',1)
2018-01-19 Friday 23:17:50  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:50  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,2,'单价','2018-01-19 23:17:50',1)
2018-01-19 Friday 23:17:50  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:50  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,3,'小计','2018-01-19 23:17:50',1)
2018-01-19 Friday 23:17:50  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:50  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,4,'总价','2018-01-19 23:17:50',1)
2018-01-19 Friday 23:17:50  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:50  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,5,'备注','2018-01-19 23:17:50',1)
2018-01-19 Friday 23:17:50  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:17:50  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-19 Friday 23:17:50  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-19 Friday 23:17:50  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:17:50  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO service(name, createdTime, father, level) VALUES('保养项目','2018-01-19 23:18:01',-1,1)
2018-01-19 Friday 23:18:01  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:18:01  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 3
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:18:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:04  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT att.id, name, di.value_desc required_desc, is_required
                    FROM attributes att, dictionary di
                   WHERE delete_state = 0
                     AND att.is_required = di.key_id
                     AND di.group_name = 'is_required'
                    ORDER BY required_desc, display_order, name
                   
2018-01-19 Friday 23:18:04  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:08  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:18:08  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:18:08  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO service(name, createdTime, father, level) 
                VALUES('电瓶','2018-01-19 23:18:08',3,2)
2018-01-19 Friday 23:18:08  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:08  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (4,1,'数量','2018-01-19 23:18:08',1)
2018-01-19 Friday 23:18:08  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:08  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (4,2,'单价','2018-01-19 23:18:08',1)
2018-01-19 Friday 23:18:08  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:08  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (4,3,'小计','2018-01-19 23:18:08',1)
2018-01-19 Friday 23:18:08  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:08  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (4,4,'总价','2018-01-19 23:18:08',1)
2018-01-19 Friday 23:18:08  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:08  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (4,5,'备注','2018-01-19 23:18:08',1)
2018-01-19 Friday 23:18:08  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:08  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-19 Friday 23:18:08  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-19 Friday 23:18:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 3
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:18:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:18:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-19 Friday 23:18:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:18:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-19 Friday 23:18:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-19 Friday 23:18:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:12  main_view.py.main_view._tab_show: 271 : INFO  add tab：normal_buy_add
2018-01-19 Friday 23:18:42  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:18:42  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:42  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:18:42  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:18:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:18:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:19:01  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-19 Friday 23:19:01  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-19 Friday 23:19:01  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:19:01  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-19 Friday 23:19:01  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:32  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 3
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:19:32  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:32  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:19:32  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 3
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:19:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:19:43  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='马牌'
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO brand(
                                    BRAND_NAME,
                                    create_time,
                                    create_op
                                    )
                  VALUES(
                          '马牌',
                          '2018-01-19 23:19:43',
                          1
                  )
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 AND model_name = '205/55R16-CC6'
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO model(
                                    model_name,
                                    brand_id,
                                    create_time,
                                    create_op)
                  VALUES('205/55R16-CC6',1,'2018-01-19 23:19:43',1)
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '昆明聚仁腾飞商贸有限公司'
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO supplier(
                                        supplier_name,
                                        create_time,
                                        create_op)
                  VALUES(
                          '昆明聚仁腾飞商贸有限公司',
                          '2018-01-19 23:19:43',
                           1)
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 1
                
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_info(
                                        UNIT,
                                        first_service_name,
                                        first_service_id,
                                        model_id,
                                        model_name,
                                        brand_id,
                                        brand_name,
                                        name,
                                        second_service_id,
                                        second_service_name,
                                        balance,
                                        total_cost,
                                        create_time,
                                        create_op
                                        )
                VALUES(
                        '条',
                        '轮胎项目',
                         1,
                         1,
                        '205/55R16-CC6',
                         1,
                        '马牌',
                        '马牌-205/55R16-CC6',
                         2,
                        '轮胎更换',
                         10,
                        5000.00,
                        '2018-01-19 23:19:43',
                        1                    
                )
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note
                               )
              VALUES (
                      1,
                      1,
                      500.00,
                      10,
                      '2018-01-19',
                      '2018-01-19 23:19:43',
                      1,
                      1000.00,
                      4000.00,
                      5000.00,
                      1,
                      ''                                       
              )
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        1,
                        1,
                        5000.00,
                        10,
                        0,
                        1,
                        '2018-01-19 23:19:43'
                        
                )
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         1,
                         1,
                        4000.00,
                        1000.00,
                        '2018-01-19 23:19:43',
                         1,
                         1,
                         1,
                        ''
                       )
2018-01-19 Friday 23:19:43  normal_buy_add.py.normal_buy_add.do_add: 305 : ERROR  NOT NULL constraint failed: payment_detail.id
2018-01-19 Friday 23:19:43  normal_buy_add.py.normal_buy_add.do_add: 306 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/view/buy/normal_buy_add.py", line 300, in do_add
    self._add_supplier_payment_detail(buy_id, supplier_id, paid, unpaid, payment, number < 0)
  File "/Users/zhou/PycharmProjects/Py-store/view/buy/normal_buy_add.py", line 421, in _add_supplier_payment_detail
    payment_handler.add_payment_detail(payment)
  File "/Users/zhou/PycharmProjects/Py-store/database/dao/buy/payment_handler.py", line 38, in add_payment_detail
    result = execute(sql_text)
  File "/Users/zhou/PycharmProjects/Py-store/database/db_connection.py", line 55, in execute
    cur.execute(sql_text)
sqlite3.IntegrityError: NOT NULL constraint failed: payment_detail.id

2018-01-19 Friday 23:19:43  db_transaction_util.py.db_transaction_util.rollback: 30 : INFO  回滚事物
2018-01-19 Friday 23:19:43  db_transaction_util.py.db_transaction_util.rollback: 32 : INFO  事物已回滚
2018-01-19 Friday 23:19:43  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:19:43  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='瓦尔塔'
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO brand(
                                    BRAND_NAME,
                                    create_time,
                                    create_op
                                    )
                  VALUES(
                          '瓦尔塔',
                          '2018-01-19 23:19:43',
                          1
                  )
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 AND model_name = 'VAM46B24LT1蓝标'
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO model(
                                    model_name,
                                    brand_id,
                                    create_time,
                                    create_op)
                  VALUES('VAM46B24LT1蓝标',1,'2018-01-19 23:19:43',1)
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '云南励道汽车配件有限公司'
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO supplier(
                                        supplier_name,
                                        create_time,
                                        create_op)
                  VALUES(
                          '云南励道汽车配件有限公司',
                          '2018-01-19 23:19:43',
                           1)
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 1
                
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_info(
                                        UNIT,
                                        first_service_name,
                                        first_service_id,
                                        model_id,
                                        model_name,
                                        brand_id,
                                        brand_name,
                                        name,
                                        second_service_id,
                                        second_service_name,
                                        balance,
                                        total_cost,
                                        create_time,
                                        create_op
                                        )
                VALUES(
                        '只',
                        '保养项目',
                         3,
                         1,
                        'VAM46B24LT1蓝标',
                         1,
                        '瓦尔塔',
                        '瓦尔塔-VAM46B24LT1蓝标',
                         4,
                        '电瓶',
                         1,
                        310.00,
                        '2018-01-19 23:19:43',
                        1                    
                )
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note
                               )
              VALUES (
                      1,
                      1,
                      310.00,
                      1,
                      '2018-01-19',
                      '2018-01-19 23:19:43',
                      1,
                      310.00,
                      0.00,
                      310.00,
                      1,
                      ''                                       
              )
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        1,
                        1,
                        310.00,
                        1,
                        0,
                        1,
                        '2018-01-19 23:19:43'
                        
                )
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         1,
                         3,
                        0.00,
                        310.00,
                        '2018-01-19 23:19:43',
                         1,
                         1,
                         1,
                        ''
                       )
2018-01-19 Friday 23:19:43  normal_buy_add.py.normal_buy_add.do_add: 305 : ERROR  NOT NULL constraint failed: payment_detail.id
2018-01-19 Friday 23:19:43  normal_buy_add.py.normal_buy_add.do_add: 306 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/view/buy/normal_buy_add.py", line 300, in do_add
    self._add_supplier_payment_detail(buy_id, supplier_id, paid, unpaid, payment, number < 0)
  File "/Users/zhou/PycharmProjects/Py-store/view/buy/normal_buy_add.py", line 421, in _add_supplier_payment_detail
    payment_handler.add_payment_detail(payment)
  File "/Users/zhou/PycharmProjects/Py-store/database/dao/buy/payment_handler.py", line 38, in add_payment_detail
    result = execute(sql_text)
  File "/Users/zhou/PycharmProjects/Py-store/database/db_connection.py", line 55, in execute
    cur.execute(sql_text)
sqlite3.IntegrityError: NOT NULL constraint failed: payment_detail.id

2018-01-19 Friday 23:19:43  db_transaction_util.py.db_transaction_util.rollback: 30 : INFO  回滚事物
2018-01-19 Friday 23:19:43  db_transaction_util.py.db_transaction_util.rollback: 32 : INFO  事物已回滚
2018-01-19 Friday 23:19:51  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:19:51  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='马牌'
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO brand(
                                    BRAND_NAME,
                                    create_time,
                                    create_op
                                    )
                  VALUES(
                          '马牌',
                          '2018-01-19 23:19:51',
                          1
                  )
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 AND model_name = '205/55R16-CC6'
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO model(
                                    model_name,
                                    brand_id,
                                    create_time,
                                    create_op)
                  VALUES('205/55R16-CC6',1,'2018-01-19 23:19:51',1)
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '昆明聚仁腾飞商贸有限公司'
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO supplier(
                                        supplier_name,
                                        create_time,
                                        create_op)
                  VALUES(
                          '昆明聚仁腾飞商贸有限公司',
                          '2018-01-19 23:19:51',
                           1)
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 1
                
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_info(
                                        UNIT,
                                        first_service_name,
                                        first_service_id,
                                        model_id,
                                        model_name,
                                        brand_id,
                                        brand_name,
                                        name,
                                        second_service_id,
                                        second_service_name,
                                        balance,
                                        total_cost,
                                        create_time,
                                        create_op
                                        )
                VALUES(
                        '条',
                        '轮胎项目',
                         1,
                         1,
                        '205/55R16-CC6',
                         1,
                        '马牌',
                        '马牌-205/55R16-CC6',
                         2,
                        '轮胎更换',
                         10,
                        5000.00,
                        '2018-01-19 23:19:51',
                        1                    
                )
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note
                               )
              VALUES (
                      1,
                      1,
                      500.00,
                      10,
                      '2018-01-19',
                      '2018-01-19 23:19:51',
                      1,
                      1000.00,
                      4000.00,
                      5000.00,
                      1,
                      ''                                       
              )
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        1,
                        1,
                        5000.00,
                        10,
                        0,
                        1,
                        '2018-01-19 23:19:51'
                        
                )
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         1,
                         1,
                        4000.00,
                        1000.00,
                        '2018-01-19 23:19:51',
                         1,
                         1,
                         1,
                        ''
                       )
2018-01-19 Friday 23:19:51  normal_buy_add.py.normal_buy_add.do_add: 305 : ERROR  NOT NULL constraint failed: payment_detail.id
2018-01-19 Friday 23:19:51  normal_buy_add.py.normal_buy_add.do_add: 306 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/view/buy/normal_buy_add.py", line 300, in do_add
    self._add_supplier_payment_detail(buy_id, supplier_id, paid, unpaid, payment, number < 0)
  File "/Users/zhou/PycharmProjects/Py-store/view/buy/normal_buy_add.py", line 421, in _add_supplier_payment_detail
    payment_handler.add_payment_detail(payment)
  File "/Users/zhou/PycharmProjects/Py-store/database/dao/buy/payment_handler.py", line 38, in add_payment_detail
    result = execute(sql_text)
  File "/Users/zhou/PycharmProjects/Py-store/database/db_connection.py", line 55, in execute
    cur.execute(sql_text)
sqlite3.IntegrityError: NOT NULL constraint failed: payment_detail.id

2018-01-19 Friday 23:19:51  db_transaction_util.py.db_transaction_util.rollback: 30 : INFO  回滚事物
2018-01-19 Friday 23:19:51  db_transaction_util.py.db_transaction_util.rollback: 32 : INFO  事物已回滚
2018-01-19 Friday 23:19:51  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:19:51  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='瓦尔塔'
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO brand(
                                    BRAND_NAME,
                                    create_time,
                                    create_op
                                    )
                  VALUES(
                          '瓦尔塔',
                          '2018-01-19 23:19:51',
                          1
                  )
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 AND model_name = 'VAM46B24LT1蓝标'
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO model(
                                    model_name,
                                    brand_id,
                                    create_time,
                                    create_op)
                  VALUES('VAM46B24LT1蓝标',1,'2018-01-19 23:19:51',1)
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '云南励道汽车配件有限公司'
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO supplier(
                                        supplier_name,
                                        create_time,
                                        create_op)
                  VALUES(
                          '云南励道汽车配件有限公司',
                          '2018-01-19 23:19:51',
                           1)
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 1
                
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_info(
                                        UNIT,
                                        first_service_name,
                                        first_service_id,
                                        model_id,
                                        model_name,
                                        brand_id,
                                        brand_name,
                                        name,
                                        second_service_id,
                                        second_service_name,
                                        balance,
                                        total_cost,
                                        create_time,
                                        create_op
                                        )
                VALUES(
                        '只',
                        '保养项目',
                         3,
                         1,
                        'VAM46B24LT1蓝标',
                         1,
                        '瓦尔塔',
                        '瓦尔塔-VAM46B24LT1蓝标',
                         4,
                        '电瓶',
                         1,
                        310.00,
                        '2018-01-19 23:19:51',
                        1                    
                )
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note
                               )
              VALUES (
                      1,
                      1,
                      310.00,
                      1,
                      '2018-01-19',
                      '2018-01-19 23:19:51',
                      1,
                      310.00,
                      0.00,
                      310.00,
                      1,
                      ''                                       
              )
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        1,
                        1,
                        310.00,
                        1,
                        0,
                        1,
                        '2018-01-19 23:19:51'
                        
                )
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:19:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         1,
                         3,
                        0.00,
                        310.00,
                        '2018-01-19 23:19:51',
                         1,
                         1,
                         1,
                        ''
                       )
2018-01-19 Friday 23:19:51  normal_buy_add.py.normal_buy_add.do_add: 305 : ERROR  NOT NULL constraint failed: payment_detail.id
2018-01-19 Friday 23:19:51  normal_buy_add.py.normal_buy_add.do_add: 306 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/view/buy/normal_buy_add.py", line 300, in do_add
    self._add_supplier_payment_detail(buy_id, supplier_id, paid, unpaid, payment, number < 0)
  File "/Users/zhou/PycharmProjects/Py-store/view/buy/normal_buy_add.py", line 421, in _add_supplier_payment_detail
    payment_handler.add_payment_detail(payment)
  File "/Users/zhou/PycharmProjects/Py-store/database/dao/buy/payment_handler.py", line 38, in add_payment_detail
    result = execute(sql_text)
  File "/Users/zhou/PycharmProjects/Py-store/database/db_connection.py", line 55, in execute
    cur.execute(sql_text)
sqlite3.IntegrityError: NOT NULL constraint failed: payment_detail.id

2018-01-19 Friday 23:19:51  db_transaction_util.py.db_transaction_util.rollback: 30 : INFO  回滚事物
2018-01-19 Friday 23:19:51  db_transaction_util.py.db_transaction_util.rollback: 32 : INFO  事物已回滚
2018-01-19 Friday 23:20:51  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:20:51  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='马牌'
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO brand(
                                    BRAND_NAME,
                                    create_time,
                                    create_op
                                    )
                  VALUES(
                          '马牌',
                          '2018-01-19 23:20:51',
                          1
                  )
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 AND model_name = '205/55R16-CC6'
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO model(
                                    model_name,
                                    brand_id,
                                    create_time,
                                    create_op)
                  VALUES('205/55R16-CC6',1,'2018-01-19 23:20:51',1)
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '昆明聚仁腾飞商贸有限公司'
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO supplier(
                                        supplier_name,
                                        create_time,
                                        create_op)
                  VALUES(
                          '昆明聚仁腾飞商贸有限公司',
                          '2018-01-19 23:20:51',
                           1)
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 1
                
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_info(
                                        UNIT,
                                        first_service_name,
                                        first_service_id,
                                        model_id,
                                        model_name,
                                        brand_id,
                                        brand_name,
                                        name,
                                        second_service_id,
                                        second_service_name,
                                        balance,
                                        total_cost,
                                        create_time,
                                        create_op
                                        )
                VALUES(
                        '条',
                        '轮胎项目',
                         1,
                         1,
                        '205/55R16-CC6',
                         1,
                        '马牌',
                        '马牌-205/55R16-CC6',
                         2,
                        '轮胎更换',
                         10,
                        5000.00,
                        '2018-01-19 23:20:51',
                        1                    
                )
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note
                               )
              VALUES (
                      1,
                      1,
                      500.00,
                      10,
                      '2018-01-19',
                      '2018-01-19 23:20:51',
                      1,
                      1000.00,
                      4000.00,
                      5000.00,
                      1,
                      ''                                       
              )
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        1,
                        1,
                        5000.00,
                        10,
                        0,
                        1,
                        '2018-01-19 23:20:51'
                        
                )
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         1,
                         1,
                        4000.00,
                        1000.00,
                        '2018-01-19 23:20:51',
                         1,
                         1,
                         1,
                        ''
                       )
2018-01-19 Friday 23:20:51  normal_buy_add.py.normal_buy_add.do_add: 305 : ERROR  NOT NULL constraint failed: payment_detail.id
2018-01-19 Friday 23:20:51  normal_buy_add.py.normal_buy_add.do_add: 306 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/view/buy/normal_buy_add.py", line 300, in do_add
    self._add_supplier_payment_detail(buy_id, supplier_id, paid, unpaid, payment, number < 0)
  File "/Users/zhou/PycharmProjects/Py-store/view/buy/normal_buy_add.py", line 421, in _add_supplier_payment_detail
    payment_handler.add_payment_detail(payment)
  File "/Users/zhou/PycharmProjects/Py-store/database/dao/buy/payment_handler.py", line 38, in add_payment_detail
    result = execute(sql_text)
  File "/Users/zhou/PycharmProjects/Py-store/database/db_connection.py", line 55, in execute
    cur.execute(sql_text)
sqlite3.IntegrityError: NOT NULL constraint failed: payment_detail.id

2018-01-19 Friday 23:20:51  db_transaction_util.py.db_transaction_util.rollback: 30 : INFO  回滚事物
2018-01-19 Friday 23:20:51  db_transaction_util.py.db_transaction_util.rollback: 32 : INFO  事物已回滚
2018-01-19 Friday 23:20:51  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:20:51  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='瓦尔塔'
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO brand(
                                    BRAND_NAME,
                                    create_time,
                                    create_op
                                    )
                  VALUES(
                          '瓦尔塔',
                          '2018-01-19 23:20:51',
                          1
                  )
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 AND model_name = 'VAM46B24LT1蓝标'
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO model(
                                    model_name,
                                    brand_id,
                                    create_time,
                                    create_op)
                  VALUES('VAM46B24LT1蓝标',1,'2018-01-19 23:20:51',1)
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '云南励道汽车配件有限公司'
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO supplier(
                                        supplier_name,
                                        create_time,
                                        create_op)
                  VALUES(
                          '云南励道汽车配件有限公司',
                          '2018-01-19 23:20:51',
                           1)
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 1
                
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_info(
                                        UNIT,
                                        first_service_name,
                                        first_service_id,
                                        model_id,
                                        model_name,
                                        brand_id,
                                        brand_name,
                                        name,
                                        second_service_id,
                                        second_service_name,
                                        balance,
                                        total_cost,
                                        create_time,
                                        create_op
                                        )
                VALUES(
                        '只',
                        '保养项目',
                         3,
                         1,
                        'VAM46B24LT1蓝标',
                         1,
                        '瓦尔塔',
                        '瓦尔塔-VAM46B24LT1蓝标',
                         4,
                        '电瓶',
                         1,
                        310.00,
                        '2018-01-19 23:20:51',
                        1                    
                )
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note
                               )
              VALUES (
                      1,
                      1,
                      310.00,
                      1,
                      '2018-01-19',
                      '2018-01-19 23:20:51',
                      1,
                      310.00,
                      0.00,
                      310.00,
                      1,
                      ''                                       
              )
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        1,
                        1,
                        310.00,
                        1,
                        0,
                        1,
                        '2018-01-19 23:20:51'
                        
                )
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:20:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         1,
                         3,
                        0.00,
                        310.00,
                        '2018-01-19 23:20:51',
                         1,
                         1,
                         1,
                        ''
                       )
2018-01-19 Friday 23:20:51  normal_buy_add.py.normal_buy_add.do_add: 305 : ERROR  NOT NULL constraint failed: payment_detail.id
2018-01-19 Friday 23:20:51  normal_buy_add.py.normal_buy_add.do_add: 306 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/view/buy/normal_buy_add.py", line 300, in do_add
    self._add_supplier_payment_detail(buy_id, supplier_id, paid, unpaid, payment, number < 0)
  File "/Users/zhou/PycharmProjects/Py-store/view/buy/normal_buy_add.py", line 421, in _add_supplier_payment_detail
    payment_handler.add_payment_detail(payment)
  File "/Users/zhou/PycharmProjects/Py-store/database/dao/buy/payment_handler.py", line 38, in add_payment_detail
    result = execute(sql_text)
  File "/Users/zhou/PycharmProjects/Py-store/database/db_connection.py", line 55, in execute
    cur.execute(sql_text)
sqlite3.IntegrityError: NOT NULL constraint failed: payment_detail.id

2018-01-19 Friday 23:20:51  db_transaction_util.py.db_transaction_util.rollback: 30 : INFO  回滚事物
2018-01-19 Friday 23:20:51  db_transaction_util.py.db_transaction_util.rollback: 32 : INFO  事物已回滚
2018-01-19 Friday 23:24:19  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:24:19  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='马牌'
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO brand(
                                    BRAND_NAME,
                                    create_time,
                                    create_op
                                    )
                  VALUES(
                          '马牌',
                          '2018-01-19 23:24:19',
                          1
                  )
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 AND model_name = '205/55R16-CC6'
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO model(
                                    model_name,
                                    brand_id,
                                    create_time,
                                    create_op)
                  VALUES('205/55R16-CC6',1,'2018-01-19 23:24:19',1)
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '昆明聚仁腾飞商贸有限公司'
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO supplier(
                                        supplier_name,
                                        create_time,
                                        create_op)
                  VALUES(
                          '昆明聚仁腾飞商贸有限公司',
                          '2018-01-19 23:24:19',
                           1)
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 1
                
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_info(
                                        UNIT,
                                        first_service_name,
                                        first_service_id,
                                        model_id,
                                        model_name,
                                        brand_id,
                                        brand_name,
                                        name,
                                        second_service_id,
                                        second_service_name,
                                        balance,
                                        total_cost,
                                        create_time,
                                        create_op
                                        )
                VALUES(
                        '条',
                        '轮胎项目',
                         1,
                         1,
                        '205/55R16-CC6',
                         1,
                        '马牌',
                        '马牌-205/55R16-CC6',
                         2,
                        '轮胎更换',
                         10,
                        5000.00,
                        '2018-01-19 23:24:19',
                        1                    
                )
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note
                               )
              VALUES (
                      1,
                      1,
                      500.00,
                      10,
                      '2018-01-19',
                      '2018-01-19 23:24:19',
                      1,
                      1000.00,
                      4000.00,
                      5000.00,
                      1,
                      ''                                       
              )
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        1,
                        1,
                        5000.00,
                        10,
                        0,
                        1,
                        '2018-01-19 23:24:19'
                        
                )
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         1,
                         1,
                        4000.00,
                        1000.00,
                        '2018-01-19 23:24:19',
                         1,
                         1,
                         1,
                        ''
                       )
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：update supplier
                     set unpaid = unpaid + 1000.00
                   where id = 1
                
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-19 Friday 23:24:19  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-19 Friday 23:24:19  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:24:19  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='瓦尔塔'
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO brand(
                                    BRAND_NAME,
                                    create_time,
                                    create_op
                                    )
                  VALUES(
                          '瓦尔塔',
                          '2018-01-19 23:24:19',
                          1
                  )
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 AND model_name = 'VAM46B24LT1蓝标'
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO model(
                                    model_name,
                                    brand_id,
                                    create_time,
                                    create_op)
                  VALUES('VAM46B24LT1蓝标',2,'2018-01-19 23:24:19',1)
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '云南励道汽车配件有限公司'
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO supplier(
                                        supplier_name,
                                        create_time,
                                        create_op)
                  VALUES(
                          '云南励道汽车配件有限公司',
                          '2018-01-19 23:24:19',
                           1)
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 2
                
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_info(
                                        UNIT,
                                        first_service_name,
                                        first_service_id,
                                        model_id,
                                        model_name,
                                        brand_id,
                                        brand_name,
                                        name,
                                        second_service_id,
                                        second_service_name,
                                        balance,
                                        total_cost,
                                        create_time,
                                        create_op
                                        )
                VALUES(
                        '只',
                        '保养项目',
                         3,
                         2,
                        'VAM46B24LT1蓝标',
                         2,
                        '瓦尔塔',
                        '瓦尔塔-VAM46B24LT1蓝标',
                         4,
                        '电瓶',
                         1,
                        310.00,
                        '2018-01-19 23:24:19',
                        1                    
                )
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note
                               )
              VALUES (
                      2,
                      2,
                      310.00,
                      1,
                      '2018-01-19',
                      '2018-01-19 23:24:19',
                      1,
                      310.00,
                      0.00,
                      310.00,
                      1,
                      ''                                       
              )
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        2,
                        2,
                        310.00,
                        1,
                        0,
                        1,
                        '2018-01-19 23:24:19'
                        
                )
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         2,
                         3,
                        0.00,
                        310.00,
                        '2018-01-19 23:24:19',
                         1,
                         1,
                         2,
                        ''
                       )
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：update supplier
                     set unpaid = unpaid + 310.00
                   where id = 2
                
2018-01-19 Friday 23:24:19  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:24:19  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-19 Friday 23:24:19  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-19 Friday 23:26:20  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-19 Friday 23:26:20  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-19 Friday 23:26:20  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE UNIQUE INDEX userName
              ON Admin (userName);
          
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO Admin (userName,pwd,createdTime) VALUES ('admin','e93a9a6047903bd088bd4ffee28fdee8','2018-01-19 23:26:20')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX carid ON User (carId)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX ip ON Device (ip)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX dictionary_id_uindex ON dictionary (id)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (1, 1, '进货', 'buy_type')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (2, 2, '退货', 'buy_type')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (3, 0, '进货库存', 'stock_type')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (4, 1, '退货库存', 'stock_type')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (5, 2, '核增库存', 'stock_type')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (6, 3, '核减库存', 'stock_type')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (7, 4, '正库存销售', 'stock_type')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (8, 0, '已禁用', 'device_state')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (9, 1, '已启用', 'device_state')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (10, 0, '选填', 'is_required')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (11, 1, '必填', 'is_required')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (12, 8, '库存校准', 'buy_type')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (13, 5, '负库存销售', 'stock_type')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (14, 6, '已销负销售', 'stock_type')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (15, 0, '正常', 'buy_state')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (16, 1, '待审核', 'buy_state')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (17, 2, '已作废', 'buy_state')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (18, 0, '待回访', 'visit_state')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (19, 1, '已回访', 'visit_state')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (20, 1, '一级服务项目', 'service_level')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (21, 2, '二级服务项目', 'service_level')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (22, 1, '现金/转账', 'payment')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (23, 2, '信用卡', 'payment')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (24, 3, '微信', 'payment')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (25, 4, '支付宝', 'payment')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (26, 5, '支票', 'payment')
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX serviceAttribute_id_uindex ON attributes (id);
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX serviceAttribute_name_uindex ON attributes (name)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (1, '数量', 1, '2018-01-07 23:23:34', 1, 0, 1)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (2, '单价', 1, '2018-01-07 23:24:02', 1, 0, 2)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (3, '小计', 1, '2018-01-07 23:24:11', 1, 0, 3)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (4, '总价', 1, '2018-01-07 23:24:18', 1, 0, 4)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (5, '备注', 1, '2018-01-07 23:24:35', 1, 0, 5)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX father ON service (father, name)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX service_item_id_uindex ON service_item (id)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  VARCHAR(30),
          number      VARCHAR(10),
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10, 2),
          paid        INT(10, 2),
          total       INT,
          buy_type    INT,
          left_number INTEGER DEFAULT 0,
          state       INT     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX payment_detail_id_uindex ON payment_detail (id)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX userId ON Sales (userId)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE    INDEX    sales_service_ID    ON Sales(service_id)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX sales_card_id ON Sales(carId)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX createdTime ON Sales (createdTime);
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2),
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX supplier_id_uindex ON supplier (id)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX supplier_supplier_name_uindex ON supplier (supplier_name)
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:20  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-19 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-19 Friday 23:26:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:22  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-19 Friday 23:26:22  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:22  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-19 Friday 23:26:22  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-19 Friday 23:26:22  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-19 Friday 23:26:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:26:29  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:29  main_view.py.main_view._tab_show: 271 : INFO  add tab：service_manage
2018-01-19 Friday 23:26:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO service(name, createdTime, father, level) VALUES('轮胎项目','2018-01-19 23:26:35',-1,1)
2018-01-19 Friday 23:26:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:26:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:38  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:26:38  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:39  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT att.id, name, di.value_desc required_desc, is_required
                    FROM attributes att, dictionary di
                   WHERE delete_state = 0
                     AND att.is_required = di.key_id
                     AND di.group_name = 'is_required'
                    ORDER BY required_desc, display_order, name
                   
2018-01-19 Friday 23:26:39  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:44  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:26:44  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:26:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO service(name, createdTime, father, level) 
                VALUES('轮胎更换','2018-01-19 23:26:44',1,2)
2018-01-19 Friday 23:26:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,1,'数量','2018-01-19 23:26:44',1)
2018-01-19 Friday 23:26:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,2,'单价','2018-01-19 23:26:44',1)
2018-01-19 Friday 23:26:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,3,'小计','2018-01-19 23:26:44',1)
2018-01-19 Friday 23:26:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,4,'总价','2018-01-19 23:26:44',1)
2018-01-19 Friday 23:26:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,5,'备注','2018-01-19 23:26:44',1)
2018-01-19 Friday 23:26:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:44  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-19 Friday 23:26:44  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-19 Friday 23:26:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:26:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:26:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-19 Friday 23:26:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:26:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-19 Friday 23:26:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-19 Friday 23:26:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:26:49  main_view.py.main_view._tab_show: 271 : INFO  add tab：normal_buy_add
2018-01-19 Friday 23:27:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:27:14  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:27:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:27:14  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:27:17  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:27:17  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:27:27  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:27:27  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='马牌'
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO brand(
                                    BRAND_NAME,
                                    create_time,
                                    create_op
                                    )
                  VALUES(
                          '马牌',
                          '2018-01-19 23:27:27',
                          1
                  )
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 AND model_name = '205/55R16-CC6'
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO model(
                                    model_name,
                                    brand_id,
                                    create_time,
                                    create_op)
                  VALUES('205/55R16-CC6',1,'2018-01-19 23:27:27',1)
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '昆明聚仁腾飞商贸有限公司'
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO supplier(
                                        supplier_name,
                                        create_time,
                                        create_op)
                  VALUES(
                          '昆明聚仁腾飞商贸有限公司',
                          '2018-01-19 23:27:27',
                           1)
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 1
                
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_info(
                                        UNIT,
                                        first_service_name,
                                        first_service_id,
                                        model_id,
                                        model_name,
                                        brand_id,
                                        brand_name,
                                        name,
                                        second_service_id,
                                        second_service_name,
                                        balance,
                                        total_cost,
                                        create_time,
                                        create_op
                                        )
                VALUES(
                        '条',
                        '轮胎项目',
                         1,
                         1,
                        '205/55R16-CC6',
                         1,
                        '马牌',
                        '马牌-205/55R16-CC6',
                         2,
                        '轮胎更换',
                         10,
                        5000.00,
                        '2018-01-19 23:27:27',
                        1                    
                )
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note
                               )
              VALUES (
                      1,
                      1,
                      500.00,
                      10,
                      '2018-01-19',
                      '2018-01-19 23:27:27',
                      1,
                      1000.00,
                      4000.00,
                      5000.00,
                      1,
                      ''                                       
              )
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        1,
                        1,
                        5000.00,
                        10,
                        0,
                        1,
                        '2018-01-19 23:27:27'
                        
                )
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         1,
                         1,
                        4000.00,
                        1000.00,
                        '2018-01-19 23:27:27',
                         1,
                         1,
                         1,
                        ''
                       )
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：update supplier
                     set unpaid = unpaid + 1000.00
                   where id = 1
                
2018-01-19 Friday 23:27:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:27:27  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-19 Friday 23:27:27  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-19 Friday 23:28:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       id,
                       supplier_name,
                       sp.unpaid
                  FROM supplier sp
                 WHERE sp.unpaid > 0.0
                 GROUP BY id, supplier_name
                 ORDER BY supplier_name
2018-01-19 Friday 23:28:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:28:30  main_view.py.main_view._tab_show: 271 : INFO  add tab：supplier_arrears
2018-01-19 Friday 23:30:09  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-19 Friday 23:30:09  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-19 Friday 23:30:09  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE UNIQUE INDEX userName
              ON Admin (userName);
          
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO Admin (userName,pwd,createdTime) VALUES ('admin','e93a9a6047903bd088bd4ffee28fdee8','2018-01-19 23:30:09')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX carid ON User (carId)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX ip ON Device (ip)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX dictionary_id_uindex ON dictionary (id)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (1, 1, '进货', 'buy_type')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (2, 2, '退货', 'buy_type')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (3, 0, '进货库存', 'stock_type')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (4, 1, '退货库存', 'stock_type')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (5, 2, '核增库存', 'stock_type')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (6, 3, '核减库存', 'stock_type')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (7, 4, '正库存销售', 'stock_type')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (8, 0, '已禁用', 'device_state')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (9, 1, '已启用', 'device_state')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (10, 0, '选填', 'is_required')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (11, 1, '必填', 'is_required')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (12, 8, '库存校准', 'buy_type')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (13, 5, '负库存销售', 'stock_type')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (14, 6, '已销负销售', 'stock_type')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (15, 0, '正常', 'buy_state')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (16, 1, '待审核', 'buy_state')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (17, 2, '已作废', 'buy_state')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (18, 0, '待回访', 'visit_state')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (19, 1, '已回访', 'visit_state')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (20, 1, '一级服务项目', 'service_level')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (21, 2, '二级服务项目', 'service_level')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (22, 1, '现金/转账', 'payment')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (23, 2, '信用卡', 'payment')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (24, 3, '微信', 'payment')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (25, 4, '支付宝', 'payment')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (26, 5, '支票', 'payment')
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX serviceAttribute_id_uindex ON attributes (id);
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX serviceAttribute_name_uindex ON attributes (name)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (1, '数量', 1, '2018-01-07 23:23:34', 1, 0, 1)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (2, '单价', 1, '2018-01-07 23:24:02', 1, 0, 2)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (3, '小计', 1, '2018-01-07 23:24:11', 1, 0, 3)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (4, '总价', 1, '2018-01-07 23:24:18', 1, 0, 4)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (5, '备注', 1, '2018-01-07 23:24:35', 1, 0, 5)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX father ON service (father, name)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX service_item_id_uindex ON service_item (id)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  VARCHAR(30),
          number      VARCHAR(10),
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10, 2),
          paid        INT(10, 2),
          total       INT,
          buy_type    INT,
          left_number INTEGER DEFAULT 0,
          state       INT     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX payment_detail_id_uindex ON payment_detail (id)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX userId ON Sales (userId)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE    INDEX    sales_service_ID    ON Sales(service_id)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX sales_card_id ON Sales(carId)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX createdTime ON Sales (createdTime);
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2),
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX supplier_id_uindex ON supplier (id)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX supplier_supplier_name_uindex ON supplier (supplier_name)
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:09  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-19 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-19 Friday 23:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-19 Friday 23:30:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:17  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-19 Friday 23:30:17  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-19 Friday 23:30:18  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-19 Friday 23:30:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:30:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:21  main_view.py.main_view._tab_show: 271 : INFO  add tab：service_manage
2018-01-19 Friday 23:30:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO service(name, createdTime, father, level) VALUES('轮胎项目','2018-01-19 23:30:30',-1,1)
2018-01-19 Friday 23:30:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:31  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:30:31  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:32  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:30:32  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT att.id, name, di.value_desc required_desc, is_required
                    FROM attributes att, dictionary di
                   WHERE delete_state = 0
                     AND att.is_required = di.key_id
                     AND di.group_name = 'is_required'
                    ORDER BY required_desc, display_order, name
                   
2018-01-19 Friday 23:30:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:46  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:30:46  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:30:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO service(name, createdTime, father, level) 
                VALUES('轮胎更换','2018-01-19 23:30:46',1,2)
2018-01-19 Friday 23:30:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,1,'数量','2018-01-19 23:30:46',1)
2018-01-19 Friday 23:30:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,2,'单价','2018-01-19 23:30:46',1)
2018-01-19 Friday 23:30:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,3,'小计','2018-01-19 23:30:46',1)
2018-01-19 Friday 23:30:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,4,'总价','2018-01-19 23:30:46',1)
2018-01-19 Friday 23:30:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,5,'备注','2018-01-19 23:30:46',1)
2018-01-19 Friday 23:30:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:46  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-19 Friday 23:30:46  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-19 Friday 23:30:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:30:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:30:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-19 Friday 23:30:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:30:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-19 Friday 23:30:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-19 Friday 23:30:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:30:51  main_view.py.main_view._tab_show: 271 : INFO  add tab：normal_buy_add
2018-01-19 Friday 23:31:25  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:31:25  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:31:25  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:31:25  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:31:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:31:28  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:31:42  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:31:42  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:31:42  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='马牌'
2018-01-19 Friday 23:31:42  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:31:42  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO brand(
                                    BRAND_NAME,
                                    create_time,
                                    create_op
                                    )
                  VALUES(
                          '马牌',
                          '2018-01-19 23:31:42',
                          1
                  )
2018-01-19 Friday 23:31:42  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:31:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 AND model_name = '205/55R16-CC6'
2018-01-19 Friday 23:31:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:31:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO model(
                                    model_name,
                                    brand_id,
                                    create_time,
                                    create_op)
                  VALUES('205/55R16-CC6',1,'2018-01-19 23:31:43',1)
2018-01-19 Friday 23:31:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:31:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '昆明聚仁腾飞商贸有限公司'
2018-01-19 Friday 23:31:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:31:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO supplier(
                                        supplier_name,
                                        create_time,
                                        create_op)
                  VALUES(
                          '昆明聚仁腾飞商贸有限公司',
                          '2018-01-19 23:31:44',
                           1)
2018-01-19 Friday 23:31:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:31:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 1
                
2018-01-19 Friday 23:31:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:31:53  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_info(
                                        UNIT,
                                        first_service_name,
                                        first_service_id,
                                        model_id,
                                        model_name,
                                        brand_id,
                                        brand_name,
                                        name,
                                        second_service_id,
                                        second_service_name,
                                        balance,
                                        total_cost,
                                        create_time,
                                        create_op
                                        )
                VALUES(
                        '只',
                        '轮胎项目',
                         1,
                         1,
                        '205/55R16-CC6',
                         1,
                        '马牌',
                        '马牌-205/55R16-CC6',
                         2,
                        '轮胎更换',
                         10,
                        5000.00,
                        '2018-01-19 23:31:53',
                        1                    
                )
2018-01-19 Friday 23:31:53  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:31:59  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note
                               )
              VALUES (
                      1,
                      1,
                      500.00,
                      10,
                      '2018-01-19',
                      '2018-01-19 23:31:59',
                      1,
                      5000.00,
                      0.00,
                      5000.00,
                      1,
                      ''                                       
              )
2018-01-19 Friday 23:31:59  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:32:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        1,
                        1,
                        5000.00,
                        10,
                        0,
                        1,
                        '2018-01-19 23:32:14'
                        
                )
2018-01-19 Friday 23:32:14  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:33:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         1,
                         1,
                        0.00,
                        5000.00,
                        '2018-01-19 23:33:29',
                         1,
                         1,
                         1,
                        ''
                       )
2018-01-19 Friday 23:33:29  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:33:59  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：update supplier
                     set unpaid = unpaid + 5000.00
                   where id = 1
                
2018-01-19 Friday 23:33:59  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:34:02  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-19 Friday 23:34:02  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-19 Friday 23:35:51  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-19 Friday 23:35:51  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-19 Friday 23:35:51  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE UNIQUE INDEX userName
              ON Admin (userName);
          
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO Admin (userName,pwd,createdTime) VALUES ('admin','e93a9a6047903bd088bd4ffee28fdee8','2018-01-19 23:35:51')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX carid ON User (carId)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX ip ON Device (ip)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX dictionary_id_uindex ON dictionary (id)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (1, 1, '进货', 'buy_type')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (2, 2, '退货', 'buy_type')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (3, 0, '进货库存', 'stock_type')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (4, 1, '退货库存', 'stock_type')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (5, 2, '核增库存', 'stock_type')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (6, 3, '核减库存', 'stock_type')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (7, 4, '正库存销售', 'stock_type')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (8, 0, '已禁用', 'device_state')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (9, 1, '已启用', 'device_state')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (10, 0, '选填', 'is_required')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (11, 1, '必填', 'is_required')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (12, 8, '库存校准', 'buy_type')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (13, 5, '负库存销售', 'stock_type')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (14, 6, '已销负销售', 'stock_type')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (15, 0, '正常', 'buy_state')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (16, 1, '待审核', 'buy_state')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (17, 2, '已作废', 'buy_state')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (18, 0, '待回访', 'visit_state')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (19, 1, '已回访', 'visit_state')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (20, 1, '一级服务项目', 'service_level')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (21, 2, '二级服务项目', 'service_level')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (22, 1, '现金/转账', 'payment')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (23, 2, '信用卡', 'payment')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (24, 3, '微信', 'payment')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (25, 4, '支付宝', 'payment')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (26, 5, '支票', 'payment')
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX serviceAttribute_id_uindex ON attributes (id);
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX serviceAttribute_name_uindex ON attributes (name)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (1, '数量', 1, '2018-01-07 23:23:34', 1, 0, 1)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (2, '单价', 1, '2018-01-07 23:24:02', 1, 0, 2)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (3, '小计', 1, '2018-01-07 23:24:11', 1, 0, 3)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (4, '总价', 1, '2018-01-07 23:24:18', 1, 0, 4)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (5, '备注', 1, '2018-01-07 23:24:35', 1, 0, 5)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX father ON service (father, name)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX service_item_id_uindex ON service_item (id)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  VARCHAR(30),
          number      VARCHAR(10),
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10, 2),
          paid        INT(10, 2),
          total       INT,
          buy_type    INT,
          left_number INTEGER DEFAULT 0,
          state       INT     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX payment_detail_id_uindex ON payment_detail (id)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX userId ON Sales (userId)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE    INDEX    sales_service_ID    ON Sales(service_id)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX sales_card_id ON Sales(carId)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX createdTime ON Sales (createdTime);
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX supplier_id_uindex ON supplier (id)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX supplier_supplier_name_uindex ON supplier (supplier_name)
2018-01-19 Friday 23:35:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:51  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-19 Friday 23:35:52  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-19 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-19 Friday 23:35:52  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:53  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-19 Friday 23:35:53  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:54  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-19 Friday 23:35:54  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-19 Friday 23:35:54  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-19 Friday 23:35:58  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:35:58  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:35:58  main_view.py.main_view._tab_show: 271 : INFO  add tab：service_manage
2018-01-19 Friday 23:36:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO service(name, createdTime, father, level) VALUES('轮胎项目','2018-01-19 23:36:06',-1,1)
2018-01-19 Friday 23:36:06  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:07  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:36:07  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:08  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:36:08  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT att.id, name, di.value_desc required_desc, is_required
                    FROM attributes att, dictionary di
                   WHERE delete_state = 0
                     AND att.is_required = di.key_id
                     AND di.group_name = 'is_required'
                    ORDER BY required_desc, display_order, name
                   
2018-01-19 Friday 23:36:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:13  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:36:13  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:36:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO service(name, createdTime, father, level) 
                VALUES('轮胎更换','2018-01-19 23:36:13',1,2)
2018-01-19 Friday 23:36:13  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,1,'数量','2018-01-19 23:36:13',1)
2018-01-19 Friday 23:36:13  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,2,'单价','2018-01-19 23:36:13',1)
2018-01-19 Friday 23:36:13  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,3,'小计','2018-01-19 23:36:13',1)
2018-01-19 Friday 23:36:13  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,4,'总价','2018-01-19 23:36:13',1)
2018-01-19 Friday 23:36:13  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,5,'备注','2018-01-19 23:36:13',1)
2018-01-19 Friday 23:36:13  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:13  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-19 Friday 23:36:13  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-19 Friday 23:36:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:36:14  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:16  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:36:16  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:16  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-19 Friday 23:36:16  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:16  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:36:16  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:16  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-19 Friday 23:36:16  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:16  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-19 Friday 23:36:16  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:16  main_view.py.main_view._tab_show: 271 : INFO  add tab：normal_buy_add
2018-01-19 Friday 23:36:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:36:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:36:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:36:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:36:45  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:00  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:37:00  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='马牌'
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO brand(
                                    BRAND_NAME,
                                    create_time,
                                    create_op
                                    )
                  VALUES(
                          '马牌',
                          '2018-01-19 23:37:00',
                          1
                  )
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 AND model_name = '205/55R16-CC6'
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO model(
                                    model_name,
                                    brand_id,
                                    create_time,
                                    create_op)
                  VALUES('205/55R16-CC6',1,'2018-01-19 23:37:00',1)
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '昆明聚仁腾飞商贸有限公司'
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO supplier(
                                        supplier_name,
                                        create_time,
                                        create_op)
                  VALUES(
                          '昆明聚仁腾飞商贸有限公司',
                          '2018-01-19 23:37:00',
                           1)
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 1
                
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_info(
                                        UNIT,
                                        first_service_name,
                                        first_service_id,
                                        model_id,
                                        model_name,
                                        brand_id,
                                        brand_name,
                                        name,
                                        second_service_id,
                                        second_service_name,
                                        balance,
                                        total_cost,
                                        create_time,
                                        create_op
                                        )
                VALUES(
                        '条',
                        '轮胎项目',
                         1,
                         1,
                        '205/55R16-CC6',
                         1,
                        '马牌',
                        '马牌-205/55R16-CC6',
                         2,
                        '轮胎更换',
                         10,
                        5000.00,
                        '2018-01-19 23:37:00',
                        1                    
                )
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note
                               )
              VALUES (
                      1,
                      1,
                      500.00,
                      10,
                      '2018-01-19',
                      '2018-01-19 23:37:00',
                      1,
                      1000.00,
                      4000.00,
                      5000.00,
                      1,
                      ''                                       
              )
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        1,
                        1,
                        5000.00,
                        10,
                        0,
                        1,
                        '2018-01-19 23:37:00'
                        
                )
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         1,
                         1,
                        4000.00,
                        1000.00,
                        '2018-01-19 23:37:00',
                         1,
                         1,
                         1,
                        ''
                       )
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：update supplier
                     set unpaid = unpaid + 1000.00
                   where id = 1
                
2018-01-19 Friday 23:37:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:00  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-19 Friday 23:37:00  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-19 Friday 23:37:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       id,
                       supplier_name,
                       sp.unpaid
                  FROM supplier sp
                 WHERE sp.unpaid > 0.0
                 GROUP BY id, supplier_name
                 ORDER BY supplier_name
2018-01-19 Friday 23:37:06  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 1
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-19 Friday 23:37:06  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:06  main_view.py.main_view._tab_show: 271 : INFO  add tab：supplier_arrears
2018-01-19 Friday 23:37:57  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:37:57  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='马牌'
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 AND model_name = '205/55R16-CC6'
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '昆明聚仁腾飞商贸有限公司'
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 1
                
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                      UPDATE stock_info
                         SET balance = balance + -2,
                             total_cost = total_cost + -1000.00
                       WHERE ID = 1
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note
                               )
              VALUES (
                      1,
                      1,
                      500.00,
                      2,
                      '2018-01-19',
                      '2018-01-19 23:37:57',
                      1,
                      1000.00,
                      0.00,
                      1000.00,
                      2,
                      '退货'                                       
              )
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, number, left_number
                    FROM buy_info 
                   WHERE stock_id = 1
                     AND left_number > 0
                     AND buy_type = 1
                   order by create_time
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, unpaid, paid
                    FROM buy_info
                   WHERE stock_id = 1
                     AND unpaid > 0.0 
                     AND buy_type = 1
                    order by create_time
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                UPDATE buy_info
                   SET paid = 5000.00,
                       unpaid = 0.00,
                       note = ''
                 WHERE id = 1
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        1,
                        2,
                        1000.00,
                        2,
                        1,
                        1,
                        '2018-01-19 23:37:57'
                        
                )
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         2,
                         1,
                        0.00,
                        -1000.00,
                        '2018-01-19 23:37:57',
                         1,
                         2,
                         1,
                        ''
                       )
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：update supplier
                     set unpaid = unpaid + -1000.00
                   where id = 1
                
2018-01-19 Friday 23:37:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:37:57  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-19 Friday 23:37:57  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-19 Friday 23:38:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       id,
                       supplier_name,
                       sp.unpaid
                  FROM supplier sp
                 WHERE sp.unpaid > 0.0
                 GROUP BY id, supplier_name
                 ORDER BY supplier_name
2018-01-19 Friday 23:38:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:38:03  main_view.py.main_view._tab_show: 271 : INFO  add tab：supplier_arrears
2018-01-19 Friday 23:38:09  main_view.py.main_view._tab_show: 271 : INFO  add tab：buy_monitor
2018-01-19 Friday 23:38:10  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '20170101' AND '20180119'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-19 Friday 23:38:10  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:38:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '20170101' and '20180119'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-19 Friday 23:38:15  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:38:38  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:38:38  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:38:38  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 ORDER BY MODEL_NAME
2018-01-19 Friday 23:38:38  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:38:38  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:38:38  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:38:38  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:38:38  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:38:38  main_view.py.main_view._tab_show: 271 : INFO  add tab：history_buy
2018-01-19 Friday 23:38:39  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 1
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-19 Friday 23:38:39  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:38:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sp.supplier_name,
                       si.brand_name,
                       si.model_name,
                       avg(bi.unit_price) avg_price,
                       count(1)           buy_times,
                       sum(bi.number)     total_number
                  FROM buy_info bi,
                       stock_info si,
                       supplier sp
                 WHERE bi.stock_id = si.id
                   AND si.model_id = 1
                   AND bi.buy_type = 1
                   AND bi.supplier_id = sp.id
                 GROUP BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
                 ORDER BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
               
2018-01-19 Friday 23:38:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:38:53  main_view.py.main_view._tab_show: 271 : INFO  add tab：buy_monitor
2018-01-19 Friday 23:38:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '20170101' AND '20180119'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-19 Friday 23:38:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:39:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 1
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-19 Friday 23:39:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:39:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       s.id,
                       s.sale_date,
                       si.brand_name,
                       si.model_name,
                       s.number,
                       si.balance,
                       si.unit,
                       si.brand_id,
                       si.model_id,
                       si.id,
                       si.first_service_name,
                       si.first_service_id,
                       si.second_service_name,
                       si.second_service_id,
                       '点击销负'                  
                  FROM stock_info si,
                       Sales s,
                       stock_detail sd
                 WHERE sd.changed_id = s.id
                   AND sd.type = 5
                   AND sd.stock_id = si.id
                GROUP BY s.id,s.sale_date,si.brand_name, si.model_name, s.number, si.balance, si.unit
2018-01-19 Friday 23:39:26  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:39:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-19 Friday 23:39:26  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:39:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-19 Friday 23:39:26  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:39:26  main_view.py.main_view._tab_show: 271 : INFO  add tab：write_off_add
2018-01-19 Friday 23:39:31  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:39:31  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:39:31  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-19 Friday 23:39:31  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:39:31  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:39:31  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:39:31  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:39:31  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:39:31  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_search
2018-01-19 Friday 23:39:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT 
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_NAME,
                       BRAND_NAME,
                       MODEL_NAME,
                       BALANCE,
                       total_cost,
                       ifnull(sum(s.number), 0) AS sale_number
                  FROM stock_info si
                  LEFT JOIN stock_detail sd on sd.stock_id = si.id
                  LEFT JOIN Sales s on s.id = sd.changed_id and sd.type in (6, 5,0) AND s.sale_date BETWEEN '2018-01-01' AND '2018-12-31'
                 WHERE 1=1
                  GROUP BY FIRST_SERVICE_NAME,
                        SECOND_SERVICE_NAME,
                        BRAND_NAME,
                        MODEL_NAME,
                        BALANCE 
2018-01-19 Friday 23:39:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:39:42  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_name,
                       si.second_service_name,
                       sum(CASE WHEN si.balance > 0
                                THEN si.balance
                                ELSE 0
                                END) AS balance,
                       sum(CASE WHEN si.balance > 0
                                THEN si.total_cost
                                ELSE si.total_cost
                                END) AS cost
                  FROM stock_info si
                 GROUP BY si.first_service_name, si.second_service_name
2018-01-19 Friday 23:39:42  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:39:42  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_money
2018-01-19 Friday 23:39:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:39:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:41:28  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-19 Friday 23:41:28  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  VARCHAR(30),
          number      VARCHAR(10),
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10, 2),
          paid        INT(10, 2),
          total       INT,
          buy_type    INT,
          left_number INTEGER DEFAULT 0,
          state       INT     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-19 Friday 23:41:28  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-19 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-19 Friday 23:41:28  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:41:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-19 Friday 23:41:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:41:30  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-19 Friday 23:41:30  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-19 Friday 23:41:30  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-19 Friday 23:41:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:41:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:41:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-19 Friday 23:41:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:41:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:41:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:41:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-19 Friday 23:41:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:41:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-19 Friday 23:41:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:41:36  main_view.py.main_view._tab_show: 271 : INFO  add tab：normal_buy_add
2018-01-19 Friday 23:43:24  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:43:24  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:44:21  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-19 Friday 23:44:21  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  VARCHAR(30),
          number      VARCHAR(10),
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10, 2),
          paid        INT(10, 2),
          total       INT,
          buy_type    INT,
          left_number INTEGER DEFAULT 0,
          state       INT     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-19 Friday 23:44:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-19 Friday 23:44:21  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-19 Friday 23:44:22  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-19 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-19 Friday 23:44:22  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:44:25  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-19 Friday 23:44:25  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:44:26  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-19 Friday 23:44:26  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-19 Friday 23:44:26  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-19 Friday 23:44:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:44:28  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:44:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-19 Friday 23:44:28  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:44:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:44:28  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:44:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-19 Friday 23:44:28  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:44:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-19 Friday 23:44:28  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:44:28  main_view.py.main_view._tab_show: 271 : INFO  add tab：normal_buy_add
2018-01-19 Friday 23:44:31  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:44:31  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:44:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:44:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:44:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:44:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:45:06  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-19 Friday 23:45:06  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  VARCHAR(30),
          number      VARCHAR(10),
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10, 2),
          paid        INT(10, 2),
          total       INT,
          buy_type    INT,
          left_number INTEGER DEFAULT 0,
          state       INT     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-19 Friday 23:45:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-19 Friday 23:45:06  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-19 Friday 23:45:07  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-19 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-19 Friday 23:45:07  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:45:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-19 Friday 23:45:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:45:09  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-19 Friday 23:45:09  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-19 Friday 23:45:09  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-19 Friday 23:45:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:45:15  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:45:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-19 Friday 23:45:15  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:45:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:45:15  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:45:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-19 Friday 23:45:15  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:45:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-19 Friday 23:45:15  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:45:15  main_view.py.main_view._tab_show: 271 : INFO  add tab：normal_buy_add
2018-01-19 Friday 23:45:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:45:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:45:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:45:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:45:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:45:45  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:02  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:46:02  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='马牌'
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 AND model_name = '205/55R16-CC6'
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '昆明聚仁腾飞商贸有限公司'
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 1
                
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                      UPDATE stock_info
                         SET balance = balance + 3,
                             total_cost = total_cost + 1350.00
                       WHERE ID = 1
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note
                               )
              VALUES (
                      1,
                      1,
                      450.00,
                      3,
                      '2018-01-19',
                      '2018-01-19 23:46:02',
                      1,
                      350.00,
                      1000.00,
                      1350.00,
                      1,
                      ''                                       
              )
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        1,
                        3,
                        1350.00,
                        3,
                        0,
                        1,
                        '2018-01-19 23:46:02'
                        
                )
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         3,
                         2,
                        1000.00,
                        350.00,
                        '2018-01-19 23:46:02',
                         1,
                         1,
                         1,
                        ''
                       )
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：update supplier
                     set unpaid = unpaid + 350.00
                   where id = 1
                
2018-01-19 Friday 23:46:02  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:02  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-19 Friday 23:46:02  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-19 Friday 23:46:08  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       id,
                       supplier_name,
                       sp.unpaid
                  FROM supplier sp
                 WHERE sp.unpaid > 0.0
                 GROUP BY id, supplier_name
                 ORDER BY supplier_name
2018-01-19 Friday 23:46:08  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:08  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 1
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-19 Friday 23:46:08  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:08  main_view.py.main_view._tab_show: 271 : INFO  add tab：supplier_arrears
2018-01-19 Friday 23:46:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 1
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-19 Friday 23:46:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:42  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:46:42  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:42  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 ORDER BY MODEL_NAME
2018-01-19 Friday 23:46:42  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:42  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:46:42  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:42  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:46:42  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:42  main_view.py.main_view._tab_show: 271 : INFO  add tab：history_buy
2018-01-19 Friday 23:46:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 1
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-19 Friday 23:46:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:46:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sp.supplier_name,
                       si.brand_name,
                       si.model_name,
                       avg(bi.unit_price) avg_price,
                       count(1)           buy_times,
                       sum(bi.number)     total_number
                  FROM buy_info bi,
                       stock_info si,
                       supplier sp
                 WHERE bi.stock_id = si.id
                   AND si.model_id = 1
                   AND bi.buy_type = 1
                   AND bi.supplier_id = sp.id
                 GROUP BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
                 ORDER BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
               
2018-01-19 Friday 23:46:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:47:24  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-19 Friday 23:47:24  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:48:27  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-19 Friday 23:48:27  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  VARCHAR(30),
          number      VARCHAR(10),
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10, 2),
          paid        INT(10, 2),
          total       INT,
          buy_type    INT,
          left_number INTEGER DEFAULT 0,
          state       INT     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-19 Friday 23:48:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-19 Friday 23:48:27  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-19 Friday 23:48:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-19 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-19 Friday 23:48:28  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:48:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-19 Friday 23:48:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:48:30  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-19 Friday 23:48:30  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-19 Friday 23:48:30  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-19 Friday 23:48:35  main_view.py.main_view._tab_show: 271 : INFO  add tab：buy_monitor
2018-01-19 Friday 23:48:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '20170101' AND '20180119'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-19 Friday 23:48:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:48:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '20170101' and '20180119'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-19 Friday 23:48:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:48:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-19 Friday 23:48:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:48:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-19 Friday 23:48:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:48:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-19 Friday 23:48:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:48:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-19 Friday 23:48:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:48:46  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_search
2018-01-19 Friday 23:48:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT 
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_NAME,
                       BRAND_NAME,
                       MODEL_NAME,
                       BALANCE,
                       total_cost,
                       ifnull(sum(s.number), 0) AS sale_number
                  FROM stock_info si
                  LEFT JOIN stock_detail sd on sd.stock_id = si.id
                  LEFT JOIN Sales s on s.id = sd.changed_id and sd.type in (6, 5,0) AND s.sale_date BETWEEN '2018-01-01' AND '2018-12-31'
                 WHERE 1=1
                  GROUP BY FIRST_SERVICE_NAME,
                        SECOND_SERVICE_NAME,
                        BRAND_NAME,
                        MODEL_NAME,
                        BALANCE 
2018-01-19 Friday 23:48:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:48:52  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                  SELECT
                         si.brand_name,
                         si.model_name,
                         sum(left_number) AS sum,
                         max(julianday(date('now'))-julianday(bi.buy_date))
                    FROM buy_info bi,
                         stock_info si
                   WHERE bi.stock_id=si.id
                     AND bi.left_number > 0
                     AND julianday(date('now'))-julianday(bi.buy_date) >= 90          
                   GROUP BY si.model_id
2018-01-19 Friday 23:48:52  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:48:52  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_unsalable_warning
2018-01-19 Friday 23:48:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_name,
                       si.second_service_name,
                       sum(CASE WHEN si.balance > 0
                                THEN si.balance
                                ELSE 0
                                END) AS balance,
                       sum(CASE WHEN si.balance > 0
                                THEN si.total_cost
                                ELSE si.total_cost
                                END) AS cost
                  FROM stock_info si
                 GROUP BY si.first_service_name, si.second_service_name
2018-01-19 Friday 23:48:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:48:54  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_money
2018-01-19 Friday 23:48:58  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       bi.create_time,
                       BRAND_NAME,
                       MODEL_NAME,
                       si.balance,
                       bi.total,
                       bi.unit_price,
                       ad.userName,
                       bi.note,
                      CASE bi.state WHEN 1 THEN '已审核'
                    WHEN 0 THEN '未审核'
                      END AS '未审核'
                  FROM stock_info si,buy_info bi,Admin ad
                  where si.id=bi.stock_id and bi.buy_type='8' and si.create_op=ad.id
                
2018-01-19 Friday 23:48:58  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:48:58  main_view.py.main_view._tab_show: 271 : INFO  add tab：do_stock_calibration
2018-01-19 Friday 23:50:14  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-19 Friday 23:50:14  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  VARCHAR(30),
          number      VARCHAR(10),
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10, 2),
          paid        INT(10, 2),
          total       INT,
          buy_type    INT,
          left_number INTEGER DEFAULT 0,
          state       INT     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-19 Friday 23:50:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-19 Friday 23:50:14  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-19 Friday 23:50:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-19 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-19 Friday 23:50:15  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:50:17  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-19 Friday 23:50:17  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:50:18  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-19 Friday 23:50:18  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-19 Friday 23:50:18  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-19 Friday 23:50:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       bi.create_time,
                       BRAND_NAME,
                       MODEL_NAME,
                       si.balance,
                       bi.total,
                       bi.unit_price,
                       ad.userName,
                       bi.note,
                      CASE bi.state WHEN 1 THEN '已审核'
                    WHEN 0 THEN '未审核'
                      END AS '未审核'
                  FROM stock_info si,buy_info bi,Admin ad
                  where si.id=bi.stock_id and bi.buy_type='8' and si.create_op=ad.id
                
2018-01-19 Friday 23:50:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:50:30  main_view.py.main_view._tab_show: 271 : INFO  add tab：do_stock_calibration
2018-01-19 Friday 23:51:33  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-19 Friday 23:51:33  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  VARCHAR(30),
          number      VARCHAR(10),
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10, 2),
          paid        INT(10, 2),
          total       INT,
          buy_type    INT,
          left_number INTEGER DEFAULT 0,
          state       INT     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-19 Friday 23:51:33  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-19 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-19 Friday 23:51:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:51:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-19 Friday 23:51:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:51:35  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-19 Friday 23:51:35  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-19 Friday 23:51:35  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-19 Friday 23:51:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       id,
                       supplier_name,
                       sp.unpaid
                  FROM supplier sp
                 WHERE sp.unpaid > 0.0
                 GROUP BY id, supplier_name
                 ORDER BY supplier_name
2018-01-19 Friday 23:51:37  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:51:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 1
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-19 Friday 23:51:37  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:51:37  main_view.py.main_view._tab_show: 271 : INFO  add tab：supplier_arrears
2018-01-19 Friday 23:51:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-19 Friday 23:51:40  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:51:54  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:51:54  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:51:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         3,
                         2,
                        1200.00,
                        150.00,
                        '2018-01-19 23:51:54',
                         1,
                         1,
                         0,
                        ''
                       )
2018-01-19 Friday 23:51:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:51:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                UPDATE buy_info
                   SET paid = 1200.00,
                       unpaid = 150.00,
                       note = ''
                 WHERE id = 3
2018-01-19 Friday 23:51:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:51:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：update supplier
                     set unpaid = unpaid + -200.00
                   where id = 1
                
2018-01-19 Friday 23:51:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:51:54  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-19 Friday 23:51:54  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-19 Friday 23:51:55  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       id,
                       supplier_name,
                       sp.unpaid
                  FROM supplier sp
                 WHERE sp.unpaid > 0.0
                 GROUP BY id, supplier_name
                 ORDER BY supplier_name
2018-01-19 Friday 23:51:55  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:51:55  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 1
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-19 Friday 23:51:55  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:54:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-19 Friday 23:54:14  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:59:18  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-19 Friday 23:59:18  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  VARCHAR(30),
          number      VARCHAR(10),
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10, 2),
          paid        INT(10, 2),
          total       INT,
          buy_type    INT,
          left_number INTEGER DEFAULT 0,
          state       INT     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-19 Friday 23:59:18  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-19 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-19 Friday 23:59:18  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:59:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-19 Friday 23:59:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:59:20  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-19 Friday 23:59:20  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-19 Friday 23:59:20  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-19 Friday 23:59:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       id,
                       supplier_name,
                       sp.unpaid
                  FROM supplier sp
                 WHERE sp.unpaid > 0.0
                 GROUP BY id, supplier_name
                 ORDER BY supplier_name
2018-01-19 Friday 23:59:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:59:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 1
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-19 Friday 23:59:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:59:21  main_view.py.main_view._tab_show: 271 : INFO  add tab：supplier_arrears
2018-01-19 Friday 23:59:22  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 1
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-19 Friday 23:59:22  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:59:24  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-19 Friday 23:59:24  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:59:27  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-19 Friday 23:59:27  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-19 Friday 23:59:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         3,
                         2,
                        150.00,
                        0.00,
                        '2018-01-19 23:59:27',
                         1,
                         1,
                         0,
                        ''
                       )
2018-01-19 Friday 23:59:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:59:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                UPDATE buy_info
                   SET paid = 1350.00,
                       unpaid = 0.00,
                       note = ''
                 WHERE id = 3
2018-01-19 Friday 23:59:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-19 Friday 23:59:27  supplier_bulk_pay_off.py.supplier_bulk_pay_off.do_bulk_pay: 56 : ERROR  unsupported operand type(s) for -: 'int' and 'str'
2018-01-20 Saturday 00:00:23  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 00:00:23  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  VARCHAR(30),
          number      VARCHAR(10),
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10, 2),
          paid        INT(10, 2),
          total       INT,
          buy_type    INT,
          left_number INTEGER DEFAULT 0,
          state       INT     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 00:00:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 00:00:23  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 00:00:24  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 00:00:24  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:00:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 00:00:26  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:00:26  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 00:00:26  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 00:00:26  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 00:00:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       id,
                       supplier_name,
                       sp.unpaid
                  FROM supplier sp
                 WHERE sp.unpaid > 0.0
                 GROUP BY id, supplier_name
                 ORDER BY supplier_name
2018-01-20 Saturday 00:00:28  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:00:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 1
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 00:00:28  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:00:28  main_view.py.main_view._tab_show: 271 : INFO  add tab：supplier_arrears
2018-01-20 Saturday 00:00:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 1
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 00:00:29  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:00:31  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-20 Saturday 00:00:31  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:00:32  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-20 Saturday 00:00:32  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-20 Saturday 00:00:32  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         3,
                         2,
                        150.00,
                        0.00,
                        '2018-01-20 00:00:32',
                         1,
                         1,
                         0,
                        ''
                       )
2018-01-20 Saturday 00:00:32  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:00:32  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                UPDATE buy_info
                   SET paid = 1350.00,
                       unpaid = 0.00,
                       note = ''
                 WHERE id = 3
2018-01-20 Saturday 00:00:32  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:00:32  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：update supplier
                     set unpaid = unpaid + -150.00
                   where id = 1
                
2018-01-20 Saturday 00:00:32  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:00:32  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-20 Saturday 00:00:32  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-20 Saturday 00:00:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       id,
                       supplier_name,
                       sp.unpaid
                  FROM supplier sp
                 WHERE sp.unpaid > 0.0
                 GROUP BY id, supplier_name
                 ORDER BY supplier_name
2018-01-20 Saturday 00:00:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 00:05:03  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 00:05:03  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE UNIQUE INDEX userName
              ON Admin (userName);
          
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO Admin (userName,pwd,createdTime) VALUES ('admin','e93a9a6047903bd088bd4ffee28fdee8','2018-01-20 00:05:03')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX carid ON User (carId)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX ip ON Device (ip)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX dictionary_id_uindex ON dictionary (id)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (1, 1, '进货', 'buy_type')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (2, 2, '退货', 'buy_type')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (3, 0, '进货库存', 'stock_type')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (4, 1, '退货库存', 'stock_type')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (5, 2, '核增库存', 'stock_type')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (6, 3, '核减库存', 'stock_type')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (7, 4, '正库存销售', 'stock_type')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (8, 0, '已禁用', 'device_state')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (9, 1, '已启用', 'device_state')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (10, 0, '选填', 'is_required')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (11, 1, '必填', 'is_required')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (12, 8, '库存校准', 'buy_type')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (13, 5, '负库存销售', 'stock_type')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (14, 6, '已销负销售', 'stock_type')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (15, 0, '正常', 'buy_state')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (16, 1, '待审核', 'buy_state')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (17, 2, '已作废', 'buy_state')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (18, 0, '待回访', 'visit_state')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (19, 1, '已回访', 'visit_state')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (20, 1, '一级服务项目', 'service_level')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (21, 2, '二级服务项目', 'service_level')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (22, 1, '现金/转账', 'payment')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (23, 2, '信用卡', 'payment')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (24, 3, '微信', 'payment')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (25, 4, '支付宝', 'payment')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (26, 5, '支票', 'payment')
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX serviceAttribute_id_uindex ON attributes (id);
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX serviceAttribute_name_uindex ON attributes (name)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (1, '数量', 1, '2018-01-07 23:23:34', 1, 0, 1)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (2, '单价', 1, '2018-01-07 23:24:02', 1, 0, 2)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (3, '小计', 1, '2018-01-07 23:24:11', 1, 0, 3)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (4, '总价', 1, '2018-01-07 23:24:18', 1, 0, 4)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (5, '备注', 1, '2018-01-07 23:24:35', 1, 0, 5)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX father ON service (father, name)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX service_item_id_uindex ON service_item (id)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  VARCHAR(30),
          number      VARCHAR(10),
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10, 2),
          paid        INT(10, 2),
          total       INT,
          buy_type    INT,
          left_number INTEGER DEFAULT 0,
          state       INT     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX payment_detail_id_uindex ON payment_detail (id)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX userId ON Sales (userId)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE    INDEX    sales_service_ID    ON Sales(service_id)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX sales_card_id ON Sales(carId)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX createdTime ON Sales (createdTime);
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX supplier_id_uindex ON supplier (id)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX supplier_supplier_name_uindex ON supplier (supplier_name)
2018-01-20 Saturday 00:05:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:03  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 00:05:04  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 00:05:04  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 00:05:05  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:06  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 00:05:06  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 00:05:06  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 00:05:08  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:05:08  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:08  main_view.py.main_view._tab_show: 271 : INFO  add tab：service_manage
2018-01-20 Saturday 00:05:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO service(name, createdTime, father, level) VALUES('轮胎项目','2018-01-20 00:05:13',-1,1)
2018-01-20 Saturday 00:05:13  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:05:13  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:05:15  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:16  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT att.id, name, di.value_desc required_desc, is_required
                    FROM attributes att, dictionary di
                   WHERE delete_state = 0
                     AND att.is_required = di.key_id
                     AND di.group_name = 'is_required'
                    ORDER BY required_desc, display_order, name
                   
2018-01-20 Saturday 00:05:16  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:20  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-20 Saturday 00:05:20  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-20 Saturday 00:05:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO service(name, createdTime, father, level) 
                VALUES('更换轮胎','2018-01-20 00:05:20',1,2)
2018-01-20 Saturday 00:05:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,1,'数量','2018-01-20 00:05:20',1)
2018-01-20 Saturday 00:05:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,2,'单价','2018-01-20 00:05:20',1)
2018-01-20 Saturday 00:05:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,3,'小计','2018-01-20 00:05:20',1)
2018-01-20 Saturday 00:05:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,4,'总价','2018-01-20 00:05:20',1)
2018-01-20 Saturday 00:05:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,5,'备注','2018-01-20 00:05:20',1)
2018-01-20 Saturday 00:05:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:20  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-20 Saturday 00:05:20  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-20 Saturday 00:05:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:05:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:25  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:05:25  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:25  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-20 Saturday 00:05:25  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:25  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 00:05:25  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:25  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-20 Saturday 00:05:25  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:25  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-20 Saturday 00:05:25  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:25  main_view.py.main_view._tab_show: 271 : INFO  add tab：normal_buy_add
2018-01-20 Saturday 00:05:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:05:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:05:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:50  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:05:50  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:05:53  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:05:53  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:03  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-20 Saturday 00:06:03  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='马牌'
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO brand(
                                    BRAND_NAME,
                                    create_time,
                                    create_op
                                    )
                  VALUES(
                          '马牌',
                          '2018-01-20 00:06:03',
                          1
                  )
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 AND model_name = '205/55R16-CC6'
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO model(
                                    model_name,
                                    brand_id,
                                    create_time,
                                    create_op)
                  VALUES('205/55R16-CC6',1,'2018-01-20 00:06:03',1)
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '昆明聚仁腾飞商贸有限公司'
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO supplier(
                                        supplier_name,
                                        create_time,
                                        create_op)
                  VALUES(
                          '昆明聚仁腾飞商贸有限公司',
                          '2018-01-20 00:06:03',
                           1)
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 1
                
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_info(
                                        UNIT,
                                        first_service_name,
                                        first_service_id,
                                        model_id,
                                        model_name,
                                        brand_id,
                                        brand_name,
                                        name,
                                        second_service_id,
                                        second_service_name,
                                        balance,
                                        total_cost,
                                        create_time,
                                        create_op
                                        )
                VALUES(
                        '条',
                        '轮胎项目',
                         1,
                         1,
                        '205/55R16-CC6',
                         1,
                        '马牌',
                        '马牌-205/55R16-CC6',
                         2,
                        '更换轮胎',
                         10,
                        5000.00,
                        '2018-01-20 00:06:03',
                        1                    
                )
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note,
                                left_number
                               )
              VALUES (
                      1,
                      1,
                      500.00,
                      10,
                      '2018-01-20',
                      '2018-01-20 00:06:03',
                      1,
                      2000.00,
                      3000.00,
                      5000.00,
                      1,
                      '',
                      10
              )
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        1,
                        1,
                        5000.00,
                        10,
                        0,
                        1,
                        '2018-01-20 00:06:03'
                        
                )
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         1,
                         1,
                        3000.00,
                        2000.00,
                        '2018-01-20 00:06:03',
                         1,
                         1,
                         1,
                        ''
                       )
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：update supplier
                     set unpaid = unpaid + 2000.00
                   where id = 1
                
2018-01-20 Saturday 00:06:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:03  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-20 Saturday 00:06:03  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-20 Saturday 00:06:30  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-20 Saturday 00:06:30  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-20 Saturday 00:06:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='马牌'
2018-01-20 Saturday 00:06:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 AND model_name = '205/55R16-CC6'
2018-01-20 Saturday 00:06:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '昆明聚仁腾飞商贸有限公司'
2018-01-20 Saturday 00:06:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 1
                
2018-01-20 Saturday 00:06:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                      UPDATE stock_info
                         SET balance = balance + -2,
                             total_cost = total_cost + -1000.00
                       WHERE ID = 1
2018-01-20 Saturday 00:06:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note,
                                left_number
                               )
              VALUES (
                      1,
                      1,
                      500.00,
                      2,
                      '2018-01-20',
                      '2018-01-20 00:06:30',
                      1,
                      1000.00,
                      0.00,
                      1000.00,
                      2,
                      '',
                      0
              )
2018-01-20 Saturday 00:06:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, number, left_number
                    FROM buy_info 
                   WHERE stock_id = 1
                     AND left_number > 0
                     AND buy_type = 1
                   order by create_time
2018-01-20 Saturday 00:06:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:06:30  normal_buy_add.py.normal_buy_add.do_add: 306 : ERROR  unorderable types: int() >= str()
2018-01-20 Saturday 00:06:30  normal_buy_add.py.normal_buy_add.do_add: 307 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/view/buy/normal_buy_add.py", line 294, in do_add
    self._update_buy_left(stock_id, number)
  File "/Users/zhou/PycharmProjects/Py-store/view/buy/normal_buy_add.py", line 550, in _update_buy_left
    if number >= left_in_db:
TypeError: unorderable types: int() >= str()

2018-01-20 Saturday 00:06:30  db_transaction_util.py.db_transaction_util.rollback: 30 : INFO  回滚事物
2018-01-20 Saturday 00:06:30  db_transaction_util.py.db_transaction_util.rollback: 32 : INFO  事物已回滚
2018-01-20 Saturday 00:10:12  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 00:10:12  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 00:10:12  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE UNIQUE INDEX userName
              ON Admin (userName);
          
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO Admin (userName,pwd,createdTime) VALUES ('admin','e93a9a6047903bd088bd4ffee28fdee8','2018-01-20 00:10:12')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX carid ON User (carId)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX ip ON Device (ip)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX dictionary_id_uindex ON dictionary (id)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (1, 1, '进货', 'buy_type')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (2, 2, '退货', 'buy_type')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (3, 0, '进货库存', 'stock_type')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (4, 1, '退货库存', 'stock_type')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (5, 2, '核增库存', 'stock_type')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (6, 3, '核减库存', 'stock_type')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (7, 4, '正库存销售', 'stock_type')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (8, 0, '已禁用', 'device_state')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (9, 1, '已启用', 'device_state')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (10, 0, '选填', 'is_required')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (11, 1, '必填', 'is_required')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (12, 8, '库存校准', 'buy_type')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (13, 5, '负库存销售', 'stock_type')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (14, 6, '已销负销售', 'stock_type')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (15, 0, '正常', 'buy_state')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (16, 1, '待审核', 'buy_state')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (17, 2, '已作废', 'buy_state')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (18, 0, '待回访', 'visit_state')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (19, 1, '已回访', 'visit_state')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (20, 1, '一级服务项目', 'service_level')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (21, 2, '二级服务项目', 'service_level')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (22, 1, '现金/转账', 'payment')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (23, 2, '信用卡', 'payment')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (24, 3, '微信', 'payment')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (25, 4, '支付宝', 'payment')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO dictionary (id, key_id, value_desc, group_name) VALUES (26, 5, '支票', 'payment')
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX serviceAttribute_id_uindex ON attributes (id);
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX serviceAttribute_name_uindex ON attributes (name)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (1, '数量', 1, '2018-01-07 23:23:34', 1, 0, 1)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (2, '单价', 1, '2018-01-07 23:24:02', 1, 0, 2)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (3, '小计', 1, '2018-01-07 23:24:11', 1, 0, 3)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (4, '总价', 1, '2018-01-07 23:24:18', 1, 0, 4)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO attributes (id, name, is_required, create_time, create_op, delete_state, display_order)
               VALUES (5, '备注', 1, '2018-01-07 23:24:35', 1, 0, 5)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX father ON service (father, name)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX service_item_id_uindex ON service_item (id)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER(10),
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX payment_detail_id_uindex ON payment_detail (id)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX userId ON Sales (userId)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE    INDEX    sales_service_ID    ON Sales(service_id)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX sales_card_id ON Sales(carId)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE INDEX createdTime ON Sales (createdTime);
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX supplier_id_uindex ON supplier (id)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE UNIQUE INDEX supplier_supplier_name_uindex ON supplier (supplier_name)
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:12  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 00:10:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:16  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 00:10:16  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:16  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 00:10:16  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 00:10:16  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 00:10:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:10:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:20  main_view.py.main_view._tab_show: 271 : INFO  add tab：service_manage
2018-01-20 Saturday 00:10:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO service(name, createdTime, father, level) VALUES('轮胎项目','2018-01-20 00:10:26',-1,1)
2018-01-20 Saturday 00:10:26  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:10:26  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:10:28  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT att.id, name, di.value_desc required_desc, is_required
                    FROM attributes att, dictionary di
                   WHERE delete_state = 0
                     AND att.is_required = di.key_id
                     AND di.group_name = 'is_required'
                    ORDER BY required_desc, display_order, name
                   
2018-01-20 Saturday 00:10:29  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:33  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-20 Saturday 00:10:33  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-20 Saturday 00:10:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO service(name, createdTime, father, level) 
                VALUES('轮胎更换','2018-01-20 00:10:33',1,2)
2018-01-20 Saturday 00:10:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,1,'数量','2018-01-20 00:10:33',1)
2018-01-20 Saturday 00:10:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,2,'单价','2018-01-20 00:10:33',1)
2018-01-20 Saturday 00:10:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,3,'小计','2018-01-20 00:10:33',1)
2018-01-20 Saturday 00:10:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,4,'总价','2018-01-20 00:10:33',1)
2018-01-20 Saturday 00:10:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (2,5,'备注','2018-01-20 00:10:33',1)
2018-01-20 Saturday 00:10:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:33  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-20 Saturday 00:10:33  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-20 Saturday 00:10:34  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:10:34  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT attribute_id, attribute_name
                  FROM service_item
                 WHERE service_id = 2
2018-01-20 Saturday 00:10:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:38  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:10:38  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:38  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-20 Saturday 00:10:38  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:38  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 00:10:38  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:38  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-20 Saturday 00:10:38  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:38  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-20 Saturday 00:10:38  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:10:38  main_view.py.main_view._tab_show: 271 : INFO  add tab：normal_buy_add
2018-01-20 Saturday 00:11:08  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:11:08  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:11:08  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:11:08  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:11:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:11:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:11:21  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-20 Saturday 00:11:21  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='马牌'
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO brand(
                                    BRAND_NAME,
                                    create_time,
                                    create_op
                                    )
                  VALUES(
                          '马牌',
                          '2018-01-20 00:11:21',
                          1
                  )
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 AND model_name = '205/55R16-CC6'
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO model(
                                    model_name,
                                    brand_id,
                                    create_time,
                                    create_op)
                  VALUES('205/55R16-CC6',1,'2018-01-20 00:11:21',1)
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '昆明聚仁腾飞商贸有限公司'
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO supplier(
                                        supplier_name,
                                        create_time,
                                        create_op)
                  VALUES(
                          '昆明聚仁腾飞商贸有限公司',
                          '2018-01-20 00:11:21',
                           1)
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 1
                
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_info(
                                        UNIT,
                                        first_service_name,
                                        first_service_id,
                                        model_id,
                                        model_name,
                                        brand_id,
                                        brand_name,
                                        name,
                                        second_service_id,
                                        second_service_name,
                                        balance,
                                        total_cost,
                                        create_time,
                                        create_op
                                        )
                VALUES(
                        '条',
                        '轮胎项目',
                         1,
                         1,
                        '205/55R16-CC6',
                         1,
                        '马牌',
                        '马牌-205/55R16-CC6',
                         2,
                        '轮胎更换',
                         10,
                        5000.00,
                        '2018-01-20 00:11:21',
                        1                    
                )
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note,
                                left_number
                               )
              VALUES (
                      1,
                      1,
                      500.00,
                      10,
                      '2018-01-20',
                      '2018-01-20 00:11:21',
                      1,
                      2000.00,
                      3000.00,
                      5000.00,
                      1,
                      '',
                      10
              )
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        1,
                        1,
                        5000.00,
                        10,
                        0,
                        1,
                        '2018-01-20 00:11:21'
                        
                )
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         1,
                         2,
                        3000.00,
                        2000.00,
                        '2018-01-20 00:11:21',
                         1,
                         1,
                         1,
                        ''
                       )
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：update supplier
                     set unpaid = unpaid + 2000.00
                   where id = 1
                
2018-01-20 Saturday 00:11:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:11:21  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-20 Saturday 00:11:21  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-20 Saturday 00:12:07  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-20 Saturday 00:12:07  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='马牌'
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 AND model_name = '205/55R16-CC6'
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '昆明聚仁腾飞商贸有限公司'
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 1
                
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                      UPDATE stock_info
                         SET balance = balance + -2,
                             total_cost = total_cost + -1000.00
                       WHERE ID = 1
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note,
                                left_number
                               )
              VALUES (
                      1,
                      1,
                      500.00,
                      2,
                      '2018-01-20',
                      '2018-01-20 00:12:07',
                      1,
                      1000.00,
                      0.00,
                      1000.00,
                      2,
                      '',
                      0
              )
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, number, left_number
                    FROM buy_info 
                   WHERE stock_id = 1
                     AND left_number > 0
                     AND buy_type = 1
                   order by create_time
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：UPDATE buy_info SET left_number = 8 WHERE id = 1
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, unpaid, paid
                    FROM buy_info
                   WHERE stock_id = 1
                     AND unpaid > 0.0 
                     AND buy_type = 1
                    order by create_time
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                UPDATE buy_info
                   SET paid = 4000.00,
                       unpaid = 1000.00,
                       note = ''
                 WHERE id = 1
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        1,
                        2,
                        1000.00,
                        2,
                        1,
                        1,
                        '2018-01-20 00:12:07'
                        
                )
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         2,
                         2,
                        0.00,
                        -1000.00,
                        '2018-01-20 00:12:07',
                         1,
                         2,
                         1,
                        ''
                       )
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：update supplier
                     set unpaid = unpaid + -1000.00
                   where id = 1
                
2018-01-20 Saturday 00:12:07  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:12:07  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-20 Saturday 00:12:07  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-20 Saturday 00:13:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       id,
                       supplier_name,
                       sp.unpaid
                  FROM supplier sp
                 WHERE sp.unpaid > 0.0
                 GROUP BY id, supplier_name
                 ORDER BY supplier_name
2018-01-20 Saturday 00:13:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:13:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 1
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 00:13:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:13:33  main_view.py.main_view._tab_show: 271 : INFO  add tab：supplier_arrears
2018-01-20 Saturday 00:13:39  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 1
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 00:13:39  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:14:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:14:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:16:37  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 00:16:37  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 00:16:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 00:16:37  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 00:16:38  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 00:16:38  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:16:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 00:16:40  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:16:41  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 00:16:41  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 00:16:41  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 00:16:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:16:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:16:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-20 Saturday 00:16:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:16:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 00:16:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:16:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-20 Saturday 00:16:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:16:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-20 Saturday 00:16:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:16:44  main_view.py.main_view._tab_show: 271 : INFO  add tab：normal_buy_add
2018-01-20 Saturday 00:16:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:16:56  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:17:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:17:40  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:17:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:17:40  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:17:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:17:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:17:46  main_view.py.main_view._tab_show: 271 : INFO  add tab：service_manage
2018-01-20 Saturday 00:17:47  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:17:47  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:17:53  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO service(name, createdTime, father, level) VALUES('保养项目','2018-01-20 00:17:53',-1,1)
2018-01-20 Saturday 00:17:53  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:17:53  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:17:53  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:17:55  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 3
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:17:55  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:17:55  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT att.id, name, di.value_desc required_desc, is_required
                    FROM attributes att, dictionary di
                   WHERE delete_state = 0
                     AND att.is_required = di.key_id
                     AND di.group_name = 'is_required'
                    ORDER BY required_desc, display_order, name
                   
2018-01-20 Saturday 00:17:55  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:00  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-20 Saturday 00:18:00  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-20 Saturday 00:18:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO service(name, createdTime, father, level) 
                VALUES('电瓶','2018-01-20 00:18:00',3,2)
2018-01-20 Saturday 00:18:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (4,1,'数量','2018-01-20 00:18:00',1)
2018-01-20 Saturday 00:18:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (4,2,'单价','2018-01-20 00:18:00',1)
2018-01-20 Saturday 00:18:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (4,3,'小计','2018-01-20 00:18:00',1)
2018-01-20 Saturday 00:18:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (4,4,'总价','2018-01-20 00:18:00',1)
2018-01-20 Saturday 00:18:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO service_item(service_id,attribute_id,attribute_name, create_time, create_op)
                VALUES (4,5,'备注','2018-01-20 00:18:00',1)
2018-01-20 Saturday 00:18:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:00  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-20 Saturday 00:18:00  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-20 Saturday 00:18:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 3
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:18:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:04  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:18:04  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 3
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:18:06  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:18:06  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:07  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 3
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:18:07  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:23  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-20 Saturday 00:18:23  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='瓦尔塔'
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO brand(
                                    BRAND_NAME,
                                    create_time,
                                    create_op
                                    )
                  VALUES(
                          '瓦尔塔',
                          '2018-01-20 00:18:23',
                          1
                  )
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 AND model_name = 'VAM46B24LT1蓝标'
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO model(
                                    model_name,
                                    brand_id,
                                    create_time,
                                    create_op)
                  VALUES('VAM46B24LT1蓝标',2,'2018-01-20 00:18:23',1)
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '云南励道汽车配件有限公司'
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO supplier(
                                        supplier_name,
                                        create_time,
                                        create_op)
                  VALUES(
                          '云南励道汽车配件有限公司',
                          '2018-01-20 00:18:23',
                           1)
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 2
                
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_info(
                                        UNIT,
                                        first_service_name,
                                        first_service_id,
                                        model_id,
                                        model_name,
                                        brand_id,
                                        brand_name,
                                        name,
                                        second_service_id,
                                        second_service_name,
                                        balance,
                                        total_cost,
                                        create_time,
                                        create_op
                                        )
                VALUES(
                        '只',
                        '保养项目',
                         3,
                         2,
                        'VAM46B24LT1蓝标',
                         2,
                        '瓦尔塔',
                        '瓦尔塔-VAM46B24LT1蓝标',
                         4,
                        '电瓶',
                         2,
                        620.00,
                        '2018-01-20 00:18:23',
                        1                    
                )
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note,
                                left_number
                               )
              VALUES (
                      2,
                      2,
                      310.00,
                      2,
                      '2017-01-20',
                      '2018-01-20 00:18:23',
                      1,
                      600.00,
                      20.00,
                      620.00,
                      1,
                      '',
                      2
              )
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        2,
                        3,
                        620.00,
                        2,
                        0,
                        1,
                        '2018-01-20 00:18:23'
                        
                )
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         3,
                         5,
                        20.00,
                        600.00,
                        '2018-01-20 00:18:23',
                         1,
                         1,
                         2,
                        ''
                       )
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：update supplier
                     set unpaid = unpaid + 600.00
                   where id = 2
                
2018-01-20 Saturday 00:18:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:23  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-20 Saturday 00:18:23  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-20 Saturday 00:18:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 00:18:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-20 Saturday 00:18:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:18:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:18:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:35  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_search
2018-01-20 Saturday 00:18:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT 
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_NAME,
                       BRAND_NAME,
                       MODEL_NAME,
                       BALANCE,
                       total_cost,
                       ifnull(sum(s.number), 0) AS sale_number
                  FROM stock_info si
                  LEFT JOIN stock_detail sd on sd.stock_id = si.id
                  LEFT JOIN Sales s on s.id = sd.changed_id and sd.type in (6, 5,0) AND s.sale_date BETWEEN '2018-01-01' AND '2018-12-31'
                 WHERE 1=1
                  GROUP BY FIRST_SERVICE_NAME,
                        SECOND_SERVICE_NAME,
                        BRAND_NAME,
                        MODEL_NAME,
                        BALANCE 
2018-01-20 Saturday 00:18:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 00:18:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 00:18:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 00:18:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 00:18:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:46  main_view.py.main_view._tab_show: 271 : INFO  add tab：history_buy
2018-01-20 Saturday 00:18:47  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 2
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 00:18:47  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 ORDER BY MODEL_NAME
2018-01-20 Saturday 00:18:49  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:18:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 00:18:49  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 00:19:02  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 00:19:02  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 2
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 00:19:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:04  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 2
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 00:19:04  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:04  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 2
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 00:19:04  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:08  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 2
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 00:19:08  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:11  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 2
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 00:19:11  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 ORDER BY MODEL_NAME
2018-01-20 Saturday 00:19:13  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 00:19:13  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 1
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 00:19:14  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sp.supplier_name,
                       si.brand_name,
                       si.model_name,
                       avg(bi.unit_price) avg_price,
                       count(1)           buy_times,
                       sum(bi.number)     total_number
                  FROM buy_info bi,
                       stock_info si,
                       supplier sp
                 WHERE bi.stock_id = si.id
                   AND si.model_id = 1
                   AND bi.buy_type = 1
                   AND bi.supplier_id = sp.id
                 GROUP BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
                 ORDER BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
               
2018-01-20 Saturday 00:19:15  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:19  main_view.py.main_view._tab_show: 271 : INFO  add tab：buy_monitor
2018-01-20 Saturday 00:19:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '20170101' AND '20180120'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-20 Saturday 00:19:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '20170101' and '20180120'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:19:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '20170101' AND '20190120'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-20 Saturday 00:19:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '20170101' AND '20190120'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-20 Saturday 00:19:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '20170101' AND '20190120'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-20 Saturday 00:19:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '20170101' and '20190120'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:19:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '20170101' and '20190120'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:19:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:19:50  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '20170101' AND '20190120'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-20 Saturday 00:19:50  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:20:31  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '20170101' and '20190120'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:20:31  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:20:45  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 00:20:45  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 00:20:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 00:20:45  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 00:20:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 00:20:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:21:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 00:21:05  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:21:05  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 00:21:05  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 00:21:05  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 00:21:09  main_view.py.main_view._tab_show: 271 : INFO  add tab：buy_monitor
2018-01-20 Saturday 00:21:10  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '20170101' AND '20180120'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-20 Saturday 00:21:10  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:21:50  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '20170101' AND '20180120'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-20 Saturday 00:21:50  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:23:24  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '20170101' AND '20180120'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-20 Saturday 00:23:59  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:24:50  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '20170101' AND '20180120'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-20 Saturday 00:24:50  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:09  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 00:30:09  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 00:30:09  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 00:30:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:11  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 00:30:11  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:11  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 00:30:11  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 00:30:11  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 00:30:16  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 00:30:16  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:16  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-20 Saturday 00:30:16  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:16  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:30:16  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:16  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:30:16  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:16  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_search
2018-01-20 Saturday 00:30:17  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT 
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_NAME,
                       BRAND_NAME,
                       MODEL_NAME,
                       BALANCE,
                       total_cost,
                       ifnull(sum(s.number), 0) AS sale_number
                  FROM stock_info si
                  LEFT JOIN stock_detail sd on sd.stock_id = si.id
                  LEFT JOIN Sales s on s.id = sd.changed_id and sd.type in (6, 5,0) AND s.sale_date BETWEEN '2018-01-01' AND '2018-12-31'
                 WHERE 1=1
                  GROUP BY FIRST_SERVICE_NAME,
                        SECOND_SERVICE_NAME,
                        BRAND_NAME,
                        MODEL_NAME,
                        BALANCE 
2018-01-20 Saturday 00:30:17  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:21  main_view.py.main_view._tab_show: 271 : INFO  add tab：buy_monitor
2018-01-20 Saturday 00:30:22  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '2017-01-01' AND '2018-01-20'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-20 Saturday 00:30:22  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:24  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 4
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:24  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:26  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 4
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:28  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:28  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 4
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:28  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:29  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 4
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:29  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:29  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 4
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:29  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 4
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:31  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 4
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:31  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:31  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:31  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:31  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 4
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:31  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:32  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:30:32  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:34  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 00:30:34  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:34  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 00:30:34  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:34  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 00:30:34  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:34  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 00:30:34  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:34  main_view.py.main_view._tab_show: 271 : INFO  add tab：history_buy
2018-01-20 Saturday 00:30:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 2
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 00:30:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 00:30:40  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:40  main_view.py.main_view._tab_show: 271 : INFO  add tab：return_visit
2018-01-20 Saturday 00:30:41  main_view.py.main_view._tab_show: 271 : INFO  add tab：return_visit
2018-01-20 Saturday 00:30:42  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_search
2018-01-20 Saturday 00:30:56  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 00:30:56  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 00:30:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 00:30:56  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 00:30:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 00:30:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:58  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 00:30:58  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:30:59  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 00:30:59  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 00:30:59  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 00:31:01  main_view.py.main_view._tab_show: 271 : INFO  add tab：buy_monitor
2018-01-20 Saturday 00:31:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '2017-01-01' AND '2018-01-20'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-20 Saturday 00:31:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:31:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '2017-01-01' AND '2018-01-20'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-20 Saturday 00:31:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:31:34  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '2017-01-01' AND '2018-01-20'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-20 Saturday 00:31:34  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:31:34  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '2017-01-01' AND '2018-01-20'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-20 Saturday 00:31:34  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:31:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       id,
                       supplier_name,
                       sp.unpaid
                  FROM supplier sp
                 WHERE sp.unpaid > 0.0
                 GROUP BY id, supplier_name
                 ORDER BY supplier_name
2018-01-20 Saturday 00:31:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:31:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 2
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 00:31:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:31:35  main_view.py.main_view._tab_show: 271 : INFO  add tab：supplier_arrears
2018-01-20 Saturday 00:31:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 2
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 00:31:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:31:38  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 1
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 00:31:38  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:31:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 00:31:40  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:31:40  main_view.py.main_view._tab_show: 271 : INFO  add tab：return_visit
2018-01-20 Saturday 00:31:41  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 00:31:41  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:31:41  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-20 Saturday 00:31:41  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:31:41  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 00:31:41  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:31:41  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 00:31:41  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:31:41  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_search
2018-01-20 Saturday 00:31:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT 
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_NAME,
                       BRAND_NAME,
                       MODEL_NAME,
                       BALANCE,
                       total_cost,
                       ifnull(sum(s.number), 0) AS sale_number
                  FROM stock_info si
                  LEFT JOIN stock_detail sd on sd.stock_id = si.id
                  LEFT JOIN Sales s on s.id = sd.changed_id and sd.type in (6, 5,0) AND s.sale_date BETWEEN '2018-01-01' AND '2018-12-31'
                 WHERE 1=1
                  GROUP BY FIRST_SERVICE_NAME,
                        SECOND_SERVICE_NAME,
                        BRAND_NAME,
                        MODEL_NAME,
                        BALANCE 
2018-01-20 Saturday 00:31:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:31:47  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                  SELECT
                         si.brand_name,
                         si.model_name,
                         sum(left_number) AS sum,
                         max(julianday(date('now'))-julianday(bi.buy_date))
                    FROM buy_info bi,
                         stock_info si
                   WHERE bi.stock_id=si.id
                     AND bi.left_number > 0
                     AND julianday(date('now'))-julianday(bi.buy_date) >= 90          
                   GROUP BY si.model_id
2018-01-20 Saturday 00:31:47  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:31:47  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_unsalable_warning
2018-01-20 Saturday 00:32:40  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 00:32:40  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 00:32:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 00:32:40  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 00:32:41  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 00:32:41  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:32:42  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 00:32:42  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:32:42  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 00:32:42  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 00:32:43  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 00:32:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       id,
                       supplier_name,
                       sp.unpaid
                  FROM supplier sp
                 WHERE sp.unpaid > 0.0
                 GROUP BY id, supplier_name
                 ORDER BY supplier_name
2018-01-20 Saturday 00:32:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:32:44  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 2
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 00:32:44  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:32:44  main_view.py.main_view._tab_show: 271 : INFO  add tab：supplier_arrears
2018-01-20 Saturday 00:32:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                  SELECT
                         si.brand_name,
                         si.model_name,
                         sum(left_number) AS sum,
                         round(max(julianday(date('now'))-julianday(bi.buy_date)),0)
                    FROM buy_info bi,
                         stock_info si
                   WHERE bi.stock_id=si.id
                     AND bi.left_number > 0
                     AND julianday(date('now'))-julianday(bi.buy_date) >= 90          
                   GROUP BY si.model_id
2018-01-20 Saturday 00:32:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:32:46  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_unsalable_warning
2018-01-20 Saturday 00:33:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 00:33:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:33:00  main_view.py.main_view._tab_show: 271 : INFO  add tab：return_visit
2018-01-20 Saturday 00:35:02  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 00:35:02  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 00:35:02  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 00:35:02  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:35:04  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 00:35:04  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:35:04  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 00:35:04  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 00:35:04  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 00:35:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                  SELECT
                         si.brand_name,
                         si.model_name,
                         sum(left_number) AS sum,
                         floor(max(julianday(date('now'))-julianday(bi.buy_date)))
                    FROM buy_info bi,
                         stock_info si
                   WHERE bi.stock_id=si.id
                     AND bi.left_number > 0
                     AND julianday(date('now'))-julianday(bi.buy_date) >= 90          
                   GROUP BY si.model_id
2018-01-20 Saturday 00:36:02  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 00:36:02  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 00:36:02  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 00:36:02  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:36:09  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 00:36:09  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:36:09  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 00:36:09  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 00:36:10  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 00:36:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                  SELECT
                         si.brand_name,
                         si.model_name,
                         sum(left_number) AS sum,
                         math.floor(max(julianday(date('now'))-julianday(bi.buy_date)))
                    FROM buy_info bi,
                         stock_info si
                   WHERE bi.stock_id=si.id
                     AND bi.left_number > 0
                     AND julianday(date('now'))-julianday(bi.buy_date) >= 90          
                   GROUP BY si.model_id
2018-01-20 Saturday 00:44:05  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 00:44:05  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 00:44:05  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 00:44:05  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:44:11  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 00:44:11  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:44:11  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 00:44:11  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 00:44:11  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 00:44:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                  SELECT
                         si.brand_name,
                         si.model_name,
                         sum(left_number) AS sum,
                         replace(max(julianday(date('now'))-julianday(bi.buy_date)),'.','_')/1
                    FROM buy_info bi,
                         stock_info si
                   WHERE bi.stock_id=si.id
                     AND bi.left_number > 0
                     AND julianday(date('now'))-julianday(bi.buy_date) >= 90          
                   GROUP BY si.model_id
2018-01-20 Saturday 00:44:14  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:44:14  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_unsalable_warning
2018-01-20 Saturday 00:46:12  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 00:46:12  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 00:46:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 00:46:12  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 00:46:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 00:46:13  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 00:46:14  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:15  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 00:46:15  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 00:46:15  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 00:46:17  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                  SELECT
                         si.brand_name,
                         si.model_name,
                         sum(left_number) AS sum,
                         replace(max(julianday(date('now'))-julianday(bi.buy_date)),'.','_')/1 as longest_days
                    FROM buy_info bi,
                         stock_info si
                   WHERE bi.stock_id=si.id
                     AND bi.left_number > 0
                     AND julianday(date('now'))-julianday(bi.buy_date) >= 90          
                   GROUP BY si.model_id
2018-01-20 Saturday 00:46:17  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:17  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_unsalable_warning
2018-01-20 Saturday 00:46:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_name,
                       si.second_service_name,
                       sum(CASE WHEN si.balance > 0
                                THEN si.balance
                                ELSE 0
                                END) AS balance,
                       sum(CASE WHEN si.balance > 0
                                THEN si.total_cost
                                ELSE si.total_cost
                                END) AS cost
                  FROM stock_info si
                 GROUP BY si.first_service_name, si.second_service_name
2018-01-20 Saturday 00:46:21  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:21  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_money
2018-01-20 Saturday 00:46:30  main_view.py.main_view._tab_show: 271 : INFO  add tab：buy_monitor
2018-01-20 Saturday 00:46:31  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '2017-01-01' AND '2018-01-20'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-20 Saturday 00:46:31  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:46:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:46:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:34  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 4
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 00:46:34  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       id,
                       supplier_name,
                       sp.unpaid
                  FROM supplier sp
                 WHERE sp.unpaid > 0.0
                 GROUP BY id, supplier_name
                 ORDER BY supplier_name
2018-01-20 Saturday 00:46:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 2
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 00:46:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:36  main_view.py.main_view._tab_show: 271 : INFO  add tab：supplier_arrears
2018-01-20 Saturday 00:46:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 2
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 00:46:37  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:41  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       bi.create_time,
                       BRAND_NAME,
                       MODEL_NAME,
                       si.balance,
                       bi.total,
                       bi.unit_price,
                       ad.userName,
                       bi.note,
                      CASE bi.state WHEN 1 THEN '已审核'
                    WHEN 0 THEN '未审核'
                      END AS '未审核'
                  FROM stock_info si,buy_info bi,Admin ad
                  where si.id=bi.stock_id and bi.buy_type='8' and si.create_op=ad.id
                
2018-01-20 Saturday 00:46:41  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:41  main_view.py.main_view._tab_show: 271 : INFO  add tab：do_stock_calibration
2018-01-20 Saturday 00:46:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       bi.create_time,
                       BRAND_NAME,
                       MODEL_NAME,
                       si.balance,
                       bi.total,
                       bi.unit_price,
                       ad.userName,
                       bi.note,
                      CASE bi.state WHEN 1 THEN '已审核'
                    WHEN 0 THEN '未审核'
                      END AS '未审核'
                  FROM stock_info si,buy_info bi,Admin ad
                  where si.id=bi.stock_id 
                        and bi.buy_type='8' 
                        and si.create_op=ad.id
                        and bi.state= 0
                
2018-01-20 Saturday 00:46:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       bi.create_time,
                       BRAND_NAME,
                       MODEL_NAME,
                       si.balance,
                       bi.total,
                       bi.unit_price,
                       ad.userName,
                       bi.note,
                      CASE bi.state WHEN 1 THEN '已审核'
                    WHEN 0 THEN '未审核'
                      END AS '未审核'
                  FROM stock_info si,buy_info bi,Admin ad
                  where si.id=bi.stock_id 
                        and bi.buy_type='8' 
                        and si.create_op=ad.id
                        and bi.state= 1
                
2018-01-20 Saturday 00:46:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 00:46:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 00:46:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, UserNAME FROM Admin ORDER BY UserNAME
2018-01-20 Saturday 00:46:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:46:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 ORDER BY MODEL_NAME
2018-01-20 Saturday 00:46:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:47:05  socket.py.socket.server_handle: 29 : ERROR  [Errno 9] Bad file descriptor
2018-01-20 Saturday 00:47:05  common.py.common.ClientClose: 154 : ERROR  Scheduler is not running
2018-01-20 Saturday 00:47:05  socket.py.socket.server_handle: 30 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/server/socket.py", line 27, in server_handle
    data, addr = myClient.recvfrom(BUFSIZ)
OSError: [Errno 9] Bad file descriptor

2018-01-20 Saturday 00:47:05  common.py.common.ClientClose: 155 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/common/common.py", line 152, in ClientClose
    config.scheduler.shutdown()
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/apscheduler/schedulers/blocking.py", line 22, in shutdown
    super(BlockingScheduler, self).shutdown(wait)
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/apscheduler/schedulers/base.py", line 176, in shutdown
    raise SchedulerNotRunningError
apscheduler.schedulers.SchedulerNotRunningError: Scheduler is not running

2018-01-20 Saturday 00:47:23  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 00:47:23  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     NOT NULL,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 00:47:23  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 00:47:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:47:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 00:47:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:47:27  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 00:47:27  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 00:47:27  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 00:47:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT * FROM worker ORDER BY createdTime ASC
2018-01-20 Saturday 00:47:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:47:30  main_view.py.main_view._tab_show: 271 : INFO  add tab：store_user
2018-01-20 Saturday 00:47:50  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO Worker(workerName, sex, idcard, createdTime) VALUES ('周光杰','男','342343198034210341','2018-01-20 00:47:50')
2018-01-20 Saturday 00:47:50  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:47:52  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT * FROM worker ORDER BY createdTime ASC
2018-01-20 Saturday 00:47:52  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:47:58  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT att.id, name, di.value_desc required_desc, is_required
                    FROM attributes att, dictionary di
                   WHERE delete_state = 0
                     AND att.is_required = di.key_id
                     AND di.group_name = 'is_required'
                    ORDER BY required_desc, display_order, name
                   
2018-01-20 Saturday 00:47:58  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:47:58  main_view.py.main_view._tab_show: 271 : INFO  add tab：attribute_manage
2018-01-20 Saturday 00:48:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：select count(1), sum(delete_state), id from attributes where name = '品牌' GROUP BY id
2018-01-20 Saturday 00:48:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 00:48:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO attributes(name,is_required,create_time,create_op,delete_state)
                VALUES ('品牌', 0, '2018-01-20 00:48:12', 1, 0)
2018-01-20 Saturday 08:15:01  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 08:15:01  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER NOT NULL,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     PRIMARY KEY AUTOINCREMENT,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 08:15:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 08:15:01  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 08:15:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 08:15:02  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:16:38  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 08:16:38  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:16:38  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 08:16:38  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 08:16:39  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 08:16:41  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT att.id, name, di.value_desc required_desc, is_required
                    FROM attributes att, dictionary di
                   WHERE delete_state = 0
                     AND att.is_required = di.key_id
                     AND di.group_name = 'is_required'
                    ORDER BY required_desc, display_order, name
                   
2018-01-20 Saturday 08:16:41  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:16:41  main_view.py.main_view._tab_show: 271 : INFO  add tab：attribute_manage
2018-01-20 Saturday 08:16:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：select count(1), sum(delete_state), id from attributes where name = '花纹' GROUP BY id
2018-01-20 Saturday 08:16:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:16:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO attributes(name,is_required,create_time,create_op,delete_state)
                VALUES ('花纹', 0, '2018-01-20 08:16:48', 1, 0)
2018-01-20 Saturday 08:16:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:16:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT att.id, name, di.value_desc required_desc, is_required
                    FROM attributes att, dictionary di
                   WHERE delete_state = 0
                     AND att.is_required = di.key_id
                     AND di.group_name = 'is_required'
                    ORDER BY required_desc, display_order, name
                   
2018-01-20 Saturday 08:16:49  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:16:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 08:16:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:16:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-20 Saturday 08:16:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:16:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 08:16:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:16:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 08:16:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:16:54  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_search
2018-01-20 Saturday 08:16:55  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT 
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_NAME,
                       BRAND_NAME,
                       MODEL_NAME,
                       BALANCE,
                       total_cost,
                       ifnull(sum(s.number), 0) AS sale_number
                  FROM stock_info si
                  LEFT JOIN stock_detail sd on sd.stock_id = si.id
                  LEFT JOIN Sales s on s.id = sd.changed_id and sd.type in (6, 5,0) AND s.sale_date BETWEEN '2018-01-01' AND '2018-12-31'
                 WHERE 1=1
                  GROUP BY FIRST_SERVICE_NAME,
                        SECOND_SERVICE_NAME,
                        BRAND_NAME,
                        MODEL_NAME,
                        BALANCE 
2018-01-20 Saturday 08:16:55  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:19:10  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 08:19:10  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:19:11  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT 
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_NAME,
                       BRAND_NAME,
                       MODEL_NAME,
                       BALANCE,
                       total_cost,
                       ifnull(sum(s.number), 0) AS sale_number
                  FROM stock_info si
                  LEFT JOIN stock_detail sd on sd.stock_id = si.id
                  LEFT JOIN Sales s on s.id = sd.changed_id and sd.type in (6, 5,0) AND s.sale_date BETWEEN '2018-01-01' AND '2018-12-31'
                 WHERE 1=1
                   AND si.first_service_id = 1
                  GROUP BY FIRST_SERVICE_NAME,
                        SECOND_SERVICE_NAME,
                        BRAND_NAME,
                        MODEL_NAME,
                        BALANCE 
2018-01-20 Saturday 08:19:11  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:19:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 3
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 08:19:14  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:19:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT 
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_NAME,
                       BRAND_NAME,
                       MODEL_NAME,
                       BALANCE,
                       total_cost,
                       ifnull(sum(s.number), 0) AS sale_number
                  FROM stock_info si
                  LEFT JOIN stock_detail sd on sd.stock_id = si.id
                  LEFT JOIN Sales s on s.id = sd.changed_id and sd.type in (6, 5,0) AND s.sale_date BETWEEN '2018-01-01' AND '2018-12-31'
                 WHERE 1=1
                   AND si.first_service_id = 3
                  GROUP BY FIRST_SERVICE_NAME,
                        SECOND_SERVICE_NAME,
                        BRAND_NAME,
                        MODEL_NAME,
                        BALANCE 
2018-01-20 Saturday 08:19:15  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:19:25  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT 
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_NAME,
                       BRAND_NAME,
                       MODEL_NAME,
                       BALANCE,
                       total_cost,
                       ifnull(sum(s.number), 0) AS sale_number
                  FROM stock_info si
                  LEFT JOIN stock_detail sd on sd.stock_id = si.id
                  LEFT JOIN Sales s on s.id = sd.changed_id and sd.type in (6, 5,0) AND s.sale_date BETWEEN '2018-01-01' AND '2018-12-31'
                 WHERE 1=1
                   AND si.first_service_id = 3
                   AND si.brand_name like '%马牌%'
                  GROUP BY FIRST_SERVICE_NAME,
                        SECOND_SERVICE_NAME,
                        BRAND_NAME,
                        MODEL_NAME,
                        BALANCE 
2018-01-20 Saturday 08:19:25  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:19:25  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT 
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_NAME,
                       BRAND_NAME,
                       MODEL_NAME,
                       BALANCE,
                       total_cost,
                       ifnull(sum(s.number), 0) AS sale_number
                  FROM stock_info si
                  LEFT JOIN stock_detail sd on sd.stock_id = si.id
                  LEFT JOIN Sales s on s.id = sd.changed_id and sd.type in (6, 5,0) AND s.sale_date BETWEEN '2018-01-01' AND '2018-12-31'
                 WHERE 1=1
                   AND si.first_service_id = 3
                   AND si.brand_name like '%马牌%'
                  GROUP BY FIRST_SERVICE_NAME,
                        SECOND_SERVICE_NAME,
                        BRAND_NAME,
                        MODEL_NAME,
                        BALANCE 
2018-01-20 Saturday 08:19:25  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:19:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT * FROM worker ORDER BY createdTime ASC
2018-01-20 Saturday 08:19:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:19:33  main_view.py.main_view._tab_show: 271 : INFO  add tab：store_user
2018-01-20 Saturday 08:19:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT * FROM Admin ORDER BY username ASC
2018-01-20 Saturday 08:19:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:19:35  main_view.py.main_view._tab_show: 271 : INFO  add tab：system_user
2018-01-20 Saturday 08:19:40  main_view.py.main_view._tab_show: 271 : INFO  add tab：attribute_manage
2018-01-20 Saturday 08:19:43  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT * FROM Device ORDER BY name ASC
2018-01-20 Saturday 08:19:43  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:19:43  main_view.py.main_view._tab_show: 271 : INFO  add tab：setting_device
2018-01-20 Saturday 08:19:47  store_pc_info.py.store_pc_info.get_store_info: 48 : INFO  从http://119.23.39.238:8500/store/api/list?code=BAC7B0C6B07AEF76获取数据
2018-01-20 Saturday 08:19:47  store_pc_info.py.store_pc_info.get_store_info: 50 : INFO  获取到数据{"ret": true, "version": "1.0", "data": {"storeList": [{"pcId": "5a3867ff18919f24ba6d9a5b", "pcSign": "\u9ed1\u5706\u5708\u6d4b\u8bd5PC", "pcAddress": "\u6606\u660e\u5e02\u897f\u5c71\u533a\u524d\u536b\u897f\u8def\u516c\u56ed1903", "pcPhone": "18687812859", "code": "BAC7B0C6B07AEF76"}], "store": {"pcId": "5a3867ff18919f24ba6d9a5b", "pcSign": "\u9ed1\u5706\u5708\u6d4b\u8bd5PC", "pcAddress": "\u6606\u660e\u5e02\u897f\u5c71\u533a\u524d\u536b\u897f\u8def\u516c\u56ed1903", "pcPhone": "18687812859", "code": "BAC7B0C6B07AEF76"}}, "forUser": "", "forWorker": "", "code": 200}
2018-01-20 Saturday 08:19:47  main_view.py.main_view._tab_show: 271 : INFO  add tab：setting_password
2018-01-20 Saturday 08:21:02  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 08:21:02  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER PRIMARY KEY AUTOINCREMENT,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     PRIMARY KEY AUTOINCREMENT,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 08:21:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 08:21:02  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 08:21:03  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 08:21:03  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:21:04  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 08:21:04  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:21:04  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 08:21:04  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 08:21:04  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 08:21:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 08:21:06  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:21:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-20 Saturday 08:21:06  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:21:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 08:21:06  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:21:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 08:21:06  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:21:06  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_search
2018-01-20 Saturday 08:21:08  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT 
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_NAME,
                       BRAND_NAME,
                       MODEL_NAME,
                       BALANCE,
                       total_cost,
                       ifnull(sum(s.number), 0) AS sale_number
                  FROM stock_info si
                  LEFT JOIN stock_detail sd on sd.stock_id = si.id
                  LEFT JOIN Sales s on s.id = sd.changed_id and sd.type in (6, 5,0) AND s.sale_date BETWEEN '2018-01-01' AND '2018-12-31'
                 WHERE 1=1
                  GROUP BY FIRST_SERVICE_NAME,
                        SECOND_SERVICE_NAME,
                        BRAND_NAME,
                        MODEL_NAME,
                        BALANCE 
2018-01-20 Saturday 08:21:08  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:21:10  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                  SELECT
                         si.brand_name,
                         si.model_name,
                         sum(left_number) AS sum,
                         replace(max(julianday(date('now'))-julianday(bi.buy_date)),'.','_')/1 as longest_days
                    FROM buy_info bi,
                         stock_info si
                   WHERE bi.stock_id=si.id
                     AND bi.left_number > 0
                     AND julianday(date('now'))-julianday(bi.buy_date) >= 90          
                   GROUP BY si.model_id
2018-01-20 Saturday 08:21:10  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:21:10  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_unsalable_warning
2018-01-20 Saturday 08:21:43  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_unsalable_warning
2018-01-20 Saturday 08:21:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_name,
                       si.second_service_name,
                       sum(CASE WHEN si.balance > 0
                                THEN si.balance
                                ELSE 0
                                END) AS balance,
                       sum(CASE WHEN si.balance > 0
                                THEN si.total_cost
                                ELSE si.total_cost
                                END) AS cost
                  FROM stock_info si
                 GROUP BY si.first_service_name, si.second_service_name
2018-01-20 Saturday 08:21:45  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:21:45  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_money
2018-01-20 Saturday 08:22:32  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       bi.create_time,
                       BRAND_NAME,
                       MODEL_NAME,
                       si.balance,
                       bi.total,
                       bi.unit_price,
                       ad.userName,
                       bi.note,
                      CASE bi.state WHEN 1 THEN '已审核'
                    WHEN 0 THEN '未审核'
                      END AS '未审核'
                  FROM stock_info si,buy_info bi,Admin ad
                  where si.id=bi.stock_id and bi.buy_type='8' and si.create_op=ad.id
                
2018-01-20 Saturday 08:22:32  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:22:32  main_view.py.main_view._tab_show: 271 : INFO  add tab：do_stock_calibration
2018-01-20 Saturday 08:22:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       bi.create_time,
                       BRAND_NAME,
                       MODEL_NAME,
                       si.balance,
                       bi.total,
                       bi.unit_price,
                       ad.userName,
                       bi.note,
                      CASE bi.state WHEN 1 THEN '已审核'
                    WHEN 0 THEN '未审核'
                      END AS '未审核'
                  FROM stock_info si,buy_info bi,Admin ad
                  where si.id=bi.stock_id 
                        and bi.buy_type='8' 
                        and si.create_op=ad.id
                        and bi.state= 0
                
2018-01-20 Saturday 08:22:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:22:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 08:22:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:22:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 08:22:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:22:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, UserNAME FROM Admin ORDER BY UserNAME
2018-01-20 Saturday 08:22:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:22:52  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 08:22:52  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:22:52  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 08:22:52  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:22:52  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, UserNAME FROM Admin ORDER BY UserNAME
2018-01-20 Saturday 08:22:52  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:22:55  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 ORDER BY MODEL_NAME
2018-01-20 Saturday 08:22:55  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:22:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 08:22:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:24:55  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       bi.create_time,
                       BRAND_NAME,
                       MODEL_NAME,
                       si.balance,
                       bi.total,
                       bi.unit_price,
                       ad.userName,
                       bi.note,
                      CASE bi.state WHEN 1 THEN '已审核'
                    WHEN 0 THEN '未审核'
                      END AS '未审核'
                  FROM stock_info si,buy_info bi,Admin ad
                  where si.id=bi.stock_id 
                        and bi.buy_type='8' 
                        and si.create_op=ad.id
                        and bi.state= 0
                
2018-01-20 Saturday 08:24:55  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:24:59  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 08:24:59  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:24:59  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 08:24:59  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:24:59  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, UserNAME FROM Admin ORDER BY UserNAME
2018-01-20 Saturday 08:24:59  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 08:25:06  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 08:25:06  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:06  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, UserNAME FROM Admin ORDER BY UserNAME
2018-01-20 Saturday 08:25:06  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                       first.name  AS first_service,
                       second.name AS second_service,
                       count(1)    AS total_num,
                       sum(unit_price)  AS total_price
                  FROM Sales sale, service second, service first
                 WHERE sale.createdTime BETWEEN '2018-01-20' AND '2018-01-20'
                   AND sale.service_id = second.id
                   AND second.father = first.id AND first.father = -1
                 GROUP BY first_service, second_service
                 ORDER BY first_service, second_service
                 
2018-01-20 Saturday 08:25:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:12  main_view.py.main_view._tab_show: 271 : INFO  add tab：performance
2018-01-20 Saturday 08:25:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                       first.name  AS first_service,
                       second.name AS second_service,
                       count(1)    AS total_num,
                       sum(unit_price)  AS total_price
                  FROM Sales sale, service second, service first
                 WHERE sale.createdTime BETWEEN '2018-01-15' AND '2018-01-21'
                   AND sale.service_id = second.id
                   AND second.father = first.id AND first.father = -1
                 GROUP BY first_service, second_service
                 ORDER BY first_service, second_service
                 
2018-01-20 Saturday 08:25:13  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                       first.name  AS first_service,
                       second.name AS second_service,
                       count(1)    AS total_num,
                       sum(unit_price)  AS total_price
                  FROM Sales sale, service second, service first
                 WHERE sale.createdTime BETWEEN '2018-01-01' AND '2018-01-31'
                   AND sale.service_id = second.id
                   AND second.father = first.id AND first.father = -1
                 GROUP BY first_service, second_service
                 ORDER BY first_service, second_service
                 
2018-01-20 Saturday 08:25:14  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                       first.name  AS first_service,
                       second.name AS second_service,
                       count(1)    AS total_num,
                       sum(unit_price)  AS total_price
                  FROM Sales sale, service second, service first
                 WHERE sale.createdTime BETWEEN '2018-01-15' AND '2018-01-21'
                   AND sale.service_id = second.id
                   AND second.father = first.id AND first.father = -1
                 GROUP BY first_service, second_service
                 ORDER BY first_service, second_service
                 
2018-01-20 Saturday 08:25:14  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                       first.name  AS first_service,
                       second.name AS second_service,
                       count(1)    AS total_num,
                       sum(unit_price)  AS total_price
                  FROM Sales sale, service second, service first
                 WHERE sale.createdTime BETWEEN '2018-01-01' AND '2018-12-31'
                   AND sale.service_id = second.id
                   AND second.father = first.id AND first.father = -1
                 GROUP BY first_service, second_service
                 ORDER BY first_service, second_service
                 
2018-01-20 Saturday 08:25:15  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                       first.name  AS first_service,
                       second.name AS second_service,
                       count(1)    AS total_num,
                       sum(unit_price)  AS total_price
                  FROM Sales sale, service second, service first
                 WHERE sale.createdTime BETWEEN '2018-01-01' AND '2018-12-31'
                   AND sale.service_id = second.id
                   AND second.father = first.id AND first.father = -1
                 GROUP BY first_service, second_service
                 ORDER BY first_service, second_service
                 
2018-01-20 Saturday 08:25:15  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:16  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                       first.name  AS first_service,
                       second.name AS second_service,
                       count(1)    AS total_num,
                       sum(unit_price)  AS total_price
                  FROM Sales sale, service second, service first
                 WHERE sale.createdTime BETWEEN '2018-01-15' AND '2018-01-21'
                   AND sale.service_id = second.id
                   AND second.father = first.id AND first.father = -1
                 GROUP BY first_service, second_service
                 ORDER BY first_service, second_service
                 
2018-01-20 Saturday 08:25:16  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:16  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                       first.name  AS first_service,
                       second.name AS second_service,
                       count(1)    AS total_num,
                       sum(unit_price)  AS total_price
                  FROM Sales sale, service second, service first
                 WHERE sale.createdTime BETWEEN '2018-01-20' AND '2018-01-20'
                   AND sale.service_id = second.id
                   AND second.father = first.id AND first.father = -1
                 GROUP BY first_service, second_service
                 ORDER BY first_service, second_service
                 
2018-01-20 Saturday 08:25:16  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:18  main_view.py.main_view._tab_show: 271 : INFO  add tab：operation_total_data
2018-01-20 Saturday 08:25:19  main_view.py.main_view._tab_show: 271 : INFO  add tab：performance
2018-01-20 Saturday 08:25:21  main_view.py.main_view._tab_show: 271 : INFO  add tab：sub_service_operation_data
2018-01-20 Saturday 08:25:22  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       first_srv.name                                   AS first_name,
                       second_srv.name                                  AS second_name,
                       count(1)                                         AS order_count,
                       count(1)                                         AS car_count,
                       sum(sal.number)                                  AS salnumber,
                       sum(sal.number * sal.unit_price)                 AS total_price,
                       sum(sal.number * sal.unit_price) - buy.total_buy AS gross_profit
                  FROM Sales sal,
                       service second_srv,
                       service first_srv,
                       (SELECT b.changed_money AS total_buy,
                               changed_id
                          FROM stock_detail b
                         WHERE b.type in (4,5,6)) buy
                 WHERE sal.service_id = second_srv.id
                   AND sal.createdTime BETWEEN '2018-01-01' AND '2018-12-31'
                   AND second_srv.father = first_srv.id
                   AND buy.changed_id = sal.sale_id
                 GROUP BY sal.project
2018-01-20 Saturday 08:25:22  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:31  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 08:25:31  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:31  main_view.py.main_view._tab_show: 271 : INFO  add tab：return_visit
2018-01-20 Saturday 08:25:43  main_view.py.main_view._tab_show: 271 : INFO  add tab：buy_monitor
2018-01-20 Saturday 08:25:45  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       si.first_service_id,
                       si.second_service_id,
                       si.first_service_name,
                       si.second_service_name,
                       sum(bi.number)    total_number,
                       sum(bi.total)     total_price
                  FROM buy_info bi,
                       stock_info si
                 WHERE bi.stock_id = si.id
                   AND bi.buy_type = 1
                   AND bi.buy_date BETWEEN '2017-01-01' AND '2018-01-20'
                 GROUP BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
                 ORDER BY si.first_service_id,
                          si.first_service_name,
                          si.second_service_id,
                          si.second_service_name
2018-01-20 Saturday 08:25:45  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 08:25:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 4
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 08:25:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                    SELECT bi.id,
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.supplier_id,
                      sl.supplier_name,
                      si.first_service_name || '-' || si.second_service_name,
                      bi.paid,
                      bi.unpaid,
                      di.value_desc,
                      bi.stock_id     
                      FROM buy_info bi, stock_info si, dictionary di, supplier sl
                     WHERE si.second_service_id = 2
                       and bi.stock_id = si.id
                       and bi.buy_type = 1
                       and di.key_id = bi.buy_type
                       and di.group_name = 'buy_type'
                       and sl.id = bi.supplier_id
                       and bi.buy_date BETWEEN '2017-01-01' and '2018-01-20'
                     ORDER BY si.brand_name, si.model_name, bi.buy_date
2018-01-20 Saturday 08:25:49  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 08:25:56  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 08:25:56  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 08:25:56  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:56  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 08:25:56  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:56  main_view.py.main_view._tab_show: 271 : INFO  add tab：history_buy
2018-01-20 Saturday 08:25:57  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 2
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 08:25:57  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:25:58  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sp.supplier_name,
                       si.brand_name,
                       si.model_name,
                       avg(bi.unit_price) avg_price,
                       count(1)           buy_times,
                       sum(bi.number)     total_number
                  FROM buy_info bi,
                       stock_info si,
                       supplier sp
                 WHERE bi.stock_id = si.id
                   AND si.model_id = 2
                   AND bi.buy_type = 1
                   AND bi.supplier_id = sp.id
                 GROUP BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
                 ORDER BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
               
2018-01-20 Saturday 08:25:58  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:26:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       s.id,
                       s.sale_date,
                       si.brand_name,
                       si.model_name,
                       s.number,
                       si.balance,
                       si.unit,
                       si.brand_id,
                       si.model_id,
                       si.id,
                       si.first_service_name,
                       si.first_service_id,
                       si.second_service_name,
                       si.second_service_id,
                       '点击销负'                  
                  FROM stock_info si,
                       Sales s,
                       stock_detail sd
                 WHERE sd.changed_id = s.id
                   AND sd.type = 5
                   AND sd.stock_id = si.id
                GROUP BY s.id,s.sale_date,si.brand_name, si.model_name, s.number, si.balance, si.unit
2018-01-20 Saturday 08:26:14  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:26:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-20 Saturday 08:26:14  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:26:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-20 Saturday 08:26:14  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 08:26:14  main_view.py.main_view._tab_show: 271 : INFO  add tab：write_off_add
2018-01-20 Saturday 08:27:03  main_view.py.main_view._tab_show: 271 : INFO  add tab：local_sale
2018-01-20 Saturday 08:27:22  common.py.common.ClientClose: 154 : ERROR  Scheduler is not running
2018-01-20 Saturday 08:27:22  socket.py.socket.server_handle: 29 : ERROR  [Errno 9] Bad file descriptor
2018-01-20 Saturday 08:27:22  socket.py.socket.server_handle: 30 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/server/socket.py", line 27, in server_handle
    data, addr = myClient.recvfrom(BUFSIZ)
OSError: [Errno 9] Bad file descriptor

2018-01-20 Saturday 08:27:22  common.py.common.ClientClose: 155 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/common/common.py", line 152, in ClientClose
    config.scheduler.shutdown()
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/apscheduler/schedulers/blocking.py", line 22, in shutdown
    super(BlockingScheduler, self).shutdown(wait)
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/apscheduler/schedulers/base.py", line 176, in shutdown
    raise SchedulerNotRunningError
apscheduler.schedulers.SchedulerNotRunningError: Scheduler is not running

2018-01-20 Saturday 20:04:14  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 20:04:14  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER PRIMARY KEY AUTOINCREMENT,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     PRIMARY KEY AUTOINCREMENT,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 20:04:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 20:04:14  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 20:04:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 20:04:15  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:04:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 20:04:18  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:04:19  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 20:04:19  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 20:04:19  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 20:04:22  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 20:04:22  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:04:22  main_view.py.main_view._tab_show: 271 : INFO  add tab：service_manage
2018-01-20 Saturday 20:04:24  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 20:04:24  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:04:24  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 3
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 20:04:24  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:04:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT * FROM worker ORDER BY createdTime ASC
2018-01-20 Saturday 20:04:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:04:27  main_view.py.main_view._tab_show: 271 : INFO  add tab：store_user
2018-01-20 Saturday 20:04:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT * FROM Admin ORDER BY username ASC
2018-01-20 Saturday 20:04:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:04:35  main_view.py.main_view._tab_show: 271 : INFO  add tab：system_user
2018-01-20 Saturday 20:04:39  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO Admin(username, pwd, createdTime) VALUES ('','3568f4a1bf6cf2c0b9721a679acc48a5','2018-01-20 20:04:39')
2018-01-20 Saturday 20:04:39  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:04:42  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT * FROM Admin ORDER BY username ASC
2018-01-20 Saturday 20:04:42  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:04:52  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：DELETE FROM Admin WHERE id = '2'
2018-01-20 Saturday 20:04:52  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:04:52  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT * FROM Admin ORDER BY username ASC
2018-01-20 Saturday 20:04:52  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:10:52  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 20:10:52  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:10:52  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-20 Saturday 20:10:52  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:10:52  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:10:52  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:10:52  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:10:52  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:10:52  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-20 Saturday 20:10:52  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:10:52  main_view.py.main_view._tab_show: 271 : INFO  add tab：normal_buy_add
2018-01-20 Saturday 20:10:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:10:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:10:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:10:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:10:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 20:10:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:10:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 20:10:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:10:54  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_search
2018-01-20 Saturday 20:10:54  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 20:10:54  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:10:54  main_view.py.main_view._tab_show: 271 : INFO  add tab：return_visit
2018-01-20 Saturday 20:10:55  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       id,
                       supplier_name,
                       sp.unpaid
                  FROM supplier sp
                 WHERE sp.unpaid > 0.0
                 GROUP BY id, supplier_name
                 ORDER BY supplier_name
2018-01-20 Saturday 20:10:55  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:10:55  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 2
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 20:10:55  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:10:55  main_view.py.main_view._tab_show: 271 : INFO  add tab：supplier_arrears
2018-01-20 Saturday 20:11:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 2
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 20:11:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:11:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 1
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 20:11:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:11:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 2
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 20:11:01  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:11:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 1
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 20:11:02  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:11:10  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 2
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 20:11:10  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:13  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 20:17:13  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER PRIMARY KEY AUTOINCREMENT,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     PRIMARY KEY AUTOINCREMENT,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 20:17:13  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 20:17:13  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 20:17:14  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 20:17:14  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:22  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 20:17:22  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:22  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 20:17:22  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 20:17:22  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 20:17:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 20:17:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-20 Saturday 20:17:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:17:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:17:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-20 Saturday 20:17:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:27  main_view.py.main_view._tab_show: 271 : INFO  add tab：normal_buy_add
2018-01-20 Saturday 20:17:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:17:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:17:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, SUPPLIER_NAME FROM supplier WHERE DELETE_STATE = 0 ORDER BY SUPPLIER_NAME
2018-01-20 Saturday 20:17:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 20:17:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT key_id,
                       value_desc
                  FROM dictionary
                 WHERE group_name = 'payment'
                 GROUP BY value_desc
2018-01-20 Saturday 20:17:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:17:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:17:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:17:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:17:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:17:48  main_view.py.main_view._tab_show: 271 : INFO  add tab：history_buy
2018-01-20 Saturday 20:17:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 2
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 20:17:49  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:19:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 20:19:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:19:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 20:19:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:19:02  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 20:19:02  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:19:23  db_transaction_util.py.db_transaction_util.begin: 9 : INFO  开启事物
2018-01-20 Saturday 20:19:23  db_transaction_util.py.db_transaction_util.begin: 16 : INFO  事物已开启
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 and brand_name ='米其林'
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO brand(
                                    BRAND_NAME,
                                    create_time,
                                    create_op
                                    )
                  VALUES(
                          '米其林',
                          '2018-01-20 20:19:23',
                          1
                  )
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 3 AND model_name = '205/55R16-XM2'
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：INSERT INTO model(
                                    model_name,
                                    brand_id,
                                    create_time,
                                    create_op)
                  VALUES('205/55R16-XM2',3,'2018-01-20 20:19:23',1)
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, supplier_name FROM supplier WHERE supplier_name = '昆明聚仁腾飞商贸有限公司'
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT ID, 
                       NAME,
                       UNIT,
                       FIRST_SERVICE_ID,
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_ID,
                       SECOND_SERVICE_NAME,
                       BRAND_ID,
                       BRAND_NAME,
                       MODEL_ID,
                       MODEL_NAME,
                       BALANCE,
                       TOTAL_COST
                  FROM stock_info
                 WHERE MODEL_ID = 3
                
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_info(
                                        UNIT,
                                        first_service_name,
                                        first_service_id,
                                        model_id,
                                        model_name,
                                        brand_id,
                                        brand_name,
                                        name,
                                        second_service_id,
                                        second_service_name,
                                        balance,
                                        total_cost,
                                        create_time,
                                        create_op
                                        )
                VALUES(
                        '条',
                        '轮胎项目',
                         1,
                         3,
                        '205/55R16-XM2',
                         3,
                        '米其林',
                        '米其林-205/55R16-XM2',
                         2,
                        '轮胎更换',
                         4,
                        2000.00,
                        '2018-01-20 20:19:23',
                        1                    
                )
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO buy_info( 
                                STOCK_ID,
                                SUPPLIER_ID,
                                UNIT_PRICE,
                                NUMBER,
                                BUY_DATE,
                                CREATE_TIME,
                                CREATE_OP,
                                UNPAID,
                                PAID,
                                TOTAL,
                                BUY_TYPE,
                                note,
                                left_number
                               )
              VALUES (
                      3,
                      1,
                      500.00,
                      4,
                      '2018-01-20',
                      '2018-01-20 20:19:23',
                      1,
                      0.00,
                      2000.00,
                      2000.00,
                      1,
                      '',
                      4
              )
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO stock_detail(stock_id,changed_id,changed_money,changed_number,type,update_op,update_time)
                VALUES(
                        3,
                        4,
                        2000.00,
                        4,
                        0,
                        1,
                        '2018-01-20 20:19:23'
                        
                )
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                INSERT INTO PAYMENT_DETAIL(
                                BUY_ID,
                                PAYMENT_METHOD,
                                PAID,
                                UNPAID,
                                CREATE_TIME,
                                CREATE_OP,
                                refund_type,
                                supplier_id,
                                note
                               )
                VALUES (
                         4,
                         2,
                        2000.00,
                        0.00,
                        '2018-01-20 20:19:23',
                         1,
                         1,
                         1,
                        ''
                       )
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:19:23  db_transaction_util.py.db_transaction_util.commit: 21 : INFO  提交事物
2018-01-20 Saturday 20:19:23  db_transaction_util.py.db_transaction_util.commit: 24 : INFO  事物已提交
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 20:19:23  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:20:29  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 20:20:29  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER PRIMARY KEY AUTOINCREMENT,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     PRIMARY KEY AUTOINCREMENT,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 20:20:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 20:20:29  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 20:20:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 20:20:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:20:31  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 20:20:31  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:20:31  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 20:20:31  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 20:20:31  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 20:20:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:20:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:20:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME, BRAND_ID FROM model WHERE DELETE_STATE = 0 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:20:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:20:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id, name FROM service WHERE level = 1 ORDER BY createdTime
2018-01-20 Saturday 20:20:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:20:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT
                      one.id   AS father_id,
                      one.name AS father_name,
                      two.id,
                      two.name,
                      two.attribute,
                      two.attributeState
                    FROM service one, service two
                    WHERE two.father = one.id
                      AND one.id = 1
                      AND two.level = 2
                    ORDER BY one.name, two.name
2018-01-20 Saturday 20:20:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:20:35  main_view.py.main_view._tab_show: 271 : INFO  add tab：stock_search
2018-01-20 Saturday 20:20:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT 
                       FIRST_SERVICE_NAME,
                       SECOND_SERVICE_NAME,
                       BRAND_NAME,
                       MODEL_NAME,
                       BALANCE,
                       total_cost,
                       ifnull(sum(s.number), 0) AS sale_number
                  FROM stock_info si
                  LEFT JOIN stock_detail sd on sd.stock_id = si.id
                  LEFT JOIN Sales s on s.id = sd.changed_id and sd.type in (6, 5,0) AND s.sale_date BETWEEN '2018-01-01' AND '2018-12-31'
                 WHERE 1=1
                  GROUP BY FIRST_SERVICE_NAME,
                        SECOND_SERVICE_NAME,
                        BRAND_NAME,
                        MODEL_NAME,
                        BALANCE 
2018-01-20 Saturday 20:20:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:21:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:21:01  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:21:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:21:01  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:21:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:21:01  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:21:01  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:21:01  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:21:01  main_view.py.main_view._tab_show: 271 : INFO  add tab：history_buy
2018-01-20 Saturday 20:21:04  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 3 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:21:04  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:21:04  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:21:04  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:21:04  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 3
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 20:21:04  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:21:08  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sp.supplier_name,
                       si.brand_name,
                       si.model_name,
                       avg(bi.unit_price) avg_price,
                       count(1)           buy_times,
                       sum(bi.number)     total_number
                  FROM buy_info bi,
                       stock_info si,
                       supplier sp
                 WHERE bi.stock_id = si.id
                   AND si.model_id = 3
                   AND bi.buy_type = 1
                   AND bi.supplier_id = sp.id
                 GROUP BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
                 ORDER BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
               
2018-01-20 Saturday 20:21:08  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:21:11  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:21:11  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:21:11  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:21:11  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:21:12  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 1
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 20:21:12  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:21:16  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sp.supplier_name,
                       si.brand_name,
                       si.model_name,
                       avg(bi.unit_price) avg_price,
                       count(1)           buy_times,
                       sum(bi.number)     total_number
                  FROM buy_info bi,
                       stock_info si,
                       supplier sp
                 WHERE bi.stock_id = si.id
                   AND si.model_id = 1
                   AND bi.buy_type = 1
                   AND bi.supplier_id = sp.id
                 GROUP BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
                 ORDER BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
               
2018-01-20 Saturday 20:21:16  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:39:42  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sp.supplier_name,
                       si.brand_name,
                       si.model_name,
                       avg(bi.unit_price) avg_price,
                       count(1)           buy_times,
                       sum(bi.number)     total_number
                  FROM buy_info bi,
                       stock_info si,
                       supplier sp
                 WHERE bi.stock_id = si.id
                   AND si.model_id = 1
                   AND bi.buy_type = 1
                   AND bi.supplier_id = sp.id
                 GROUP BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
                 ORDER BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
               
2018-01-20 Saturday 20:39:42  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:39:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 3 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:39:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:39:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:39:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:39:47  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 3
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 20:39:47  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:39:48  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sp.supplier_name,
                       si.brand_name,
                       si.model_name,
                       avg(bi.unit_price) avg_price,
                       count(1)           buy_times,
                       sum(bi.number)     total_number
                  FROM buy_info bi,
                       stock_info si,
                       supplier sp
                 WHERE bi.stock_id = si.id
                   AND si.model_id = 3
                   AND bi.buy_type = 1
                   AND bi.supplier_id = sp.id
                 GROUP BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
                 ORDER BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
               
2018-01-20 Saturday 20:39:48  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:39:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:39:49  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:39:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:39:49  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:39:50  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 2
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 20:39:50  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:40:11  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:40:11  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:40:11  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:40:11  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:40:21  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 20:40:21  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER PRIMARY KEY AUTOINCREMENT,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     PRIMARY KEY AUTOINCREMENT,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 20:40:21  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 20:40:21  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 20:40:22  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 20:40:22  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:40:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 20:40:26  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:40:26  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 20:40:26  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 20:40:26  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 20:40:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:40:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:40:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:40:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:40:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:40:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:40:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:40:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:40:30  main_view.py.main_view._tab_show: 271 : INFO  add tab：history_buy
2018-01-20 Saturday 20:40:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:40:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:40:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:40:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:26  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 20:41:26  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER PRIMARY KEY AUTOINCREMENT,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     PRIMARY KEY AUTOINCREMENT,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 20:41:26  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 20:41:26  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 20:41:27  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 20:41:27  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 20:41:29  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:29  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 20:41:29  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 20:41:29  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 20:41:32  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:41:32  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:32  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:41:32  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:32  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:41:32  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:32  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:41:32  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:32  main_view.py.main_view._tab_show: 271 : INFO  add tab：history_buy
2018-01-20 Saturday 20:41:34  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 2
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 20:41:34  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:41:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:41:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 1
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 20:41:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:39  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:41:39  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:39  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:41:39  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:39  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 2
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 20:41:39  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:41  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 3 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:41:41  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:41  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:41:41  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:41:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:46  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:41:46  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 3 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:41:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:41:51  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:41:51  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:42:24  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:42:24  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:42:24  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:42:24  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:42:49  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 20:42:49  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER PRIMARY KEY AUTOINCREMENT,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     PRIMARY KEY AUTOINCREMENT,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 20:42:49  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 20:42:49  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 20:42:50  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 20:42:50  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:42:52  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='adin'
2018-01-20 Saturday 20:42:52  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:42:55  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 20:42:55  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:42:56  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 20:42:56  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 20:42:56  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 20:43:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:43:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:43:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:43:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:43:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:43:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:43:00  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:43:00  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:43:00  main_view.py.main_view._tab_show: 271 : INFO  add tab：history_buy
2018-01-20 Saturday 20:43:10  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:43:10  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:43:10  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:43:10  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:43:15  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 20:43:15  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER PRIMARY KEY AUTOINCREMENT,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     PRIMARY KEY AUTOINCREMENT,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 20:43:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 20:43:15  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 20:43:16  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 20:43:16  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:43:17  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 20:43:17  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:43:18  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 20:43:18  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 20:43:18  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 20:43:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:43:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:43:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:43:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:43:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:43:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:43:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:43:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:43:21  main_view.py.main_view._tab_show: 271 : INFO  add tab：history_buy
2018-01-20 Saturday 20:43:41  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:43:41  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:43:41  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:43:41  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:15  run.py.run.is_open: 153 : ERROR  [Errno 61] Connection refused
2018-01-20 Saturday 20:44:15  run.py.run.is_open: 154 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/run.py", line 148, in is_open
    c.connect((ip, port))
ConnectionRefusedError: [Errno 61] Connection refused

2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 365 : INFO  Opened database successfully
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Admin
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           userName VARCHAR(20) NOT NULL,
           pwd VARCHAR (32) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 369 : ERROR  table Admin already exists
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE User
        (
          id          INTEGER PRIMARY KEY AUTOINCREMENT,
          userName    VARCHAR(20),
          carModel    VARCHAR(30),
          carPhone    VARCHAR(15),
          carId       VARCHAR(10),
          createdTime DATETIME
        )
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 375 : ERROR  table User already exists
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Device
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           createdTime DATETIME NOT NULL ,
           name VARCHAR (20) NOT NULL ,
           ip VARCHAR (20) NOT NULL ,
           state INT
          )
    
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 381 : ERROR  table Device already exists
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：CREATE TABLE Worker
           (id INTEGER PRIMARY KEY AUTOINCREMENT,
           workerName VARCHAR(20) NOT NULL,
           sex VARCHAR (4) NOT NULL ,
           idCard VARCHAR (20) NOT NULL ,
           createdTime DATETIME NOT NULL
           );
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 387 : ERROR  table Worker already exists
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE dictionary
        (
          id         INTEGER PRIMARY KEY AUTOINCREMENT,
          key_id     INT,
          value_desc VARCHAR(50),
          group_name VARCHAR(50)
        )
        
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 393 : ERROR  table dictionary already exists
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE brand
        (
          id           INTEGER NOT NULL   PRIMARY KEY    AUTOINCREMENT,
          brand_name   VARCHAR(50),
          create_time  VARCHAR(30),
          create_op    VARCHAR(30),
          delete_state INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 399 : ERROR  table brand already exists
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE model
            (
              id           INTEGER NOT NULL   PRIMARY KEY       AUTOINCREMENT,
              model_name   VARCHAR(50),
              brand_id     INT,
              create_time  VARCHAR(30),
              create_op    VARCHAR(30),
              delete_state INT DEFAULT 0 NOT NULL
            )
            
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 405 : ERROR  table model already exists
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE Attributes
        (
          id           INTEGER     PRIMARY KEY AUTOINCREMENT,
          name         VARCHAR(20) NOT NULL,
          is_required  INT DEFAULT 0,
          create_time  VARCHAR(50) NOT NULL,
          create_op    INT         NOT NULL,
          delete_state INT DEFAULT 0 NOT NULL,
          display_order INT
        )
        
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 411 : ERROR  table Attributes already exists
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service
        (
          id             INTEGER     PRIMARY KEY
          AUTOINCREMENT,
          createdTime    DATETIME    NOT NULL,
          name           VARCHAR(20) NOT NULL,
          father         INTEGER     NOT NULL,
          level          INT,
          attribute      VARCHAR(1000),
          attributeState VARCHAR(1000)
        )
    
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 417 : ERROR  table service already exists
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE service_item
        (
          id             INTEGER     PRIMARY KEY AUTOINCREMENT,
          service_id     INTEGER,
          attribute_id   INTEGER,
          attribute_name VARCHAR(20),
          create_time    VARCHAR(50),
          create_op      INTEGER
        )
    
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 423 : ERROR  table service_item already exists
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                CREATE TABLE stock_info
                (
                  id                  INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
                  unit                VARCHAR(10),
                  first_service_name  VARCHAR(30),
                  first_service_id    INTEGER,
                  model_id            INTEGER,
                  model_name          VARCHAR(100),
                  brand_id            INTEGER,
                  brand_name          VARCHAR(100),
                  name                VARCHAR(150),
                  second_service_id   INTEGER,
                  second_service_name VARCHAR(50),
                  balance             INT,
                  total_cost          INT(18, 2),
                  create_time         VARCHAR(50),
                  create_op           INTEGER
                )
                
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 429 : ERROR  table stock_info already exists
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
            CREATE TABLE stock_detail
            (
              Id          INTEGER NOT NULL  PRIMARY KEY  AUTOINCREMENT,
              stock_id    INTEGER,
              changed_id      INTEGER NOT NULL,
              changed_money   INT(10, 2),
              changed_number  INTEGER,
              type        INT(2),
              update_time VARCHAR(50),
              update_op   INTEGER
            )
            
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 435 : ERROR  table stock_detail already exists
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE buy_info
        (
          id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          stock_id    VARCHAR(30),
          supplier_id INTEGER,
          unit_price  INT(10,2),
          number      INTEGER,
          buy_date    VARCHAR(50),
          create_time VARCHAR(50),
          create_op   INTEGER,
          unpaid      INT(10,2),
          paid        INT(10,2),
          total       INT(10,2),
          buy_type    INT(2),
          left_number INTEGER DEFAULT 0,
          state       INT(2)     DEFAULT 0,
          note        VARCHAR(200)
        )
        
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 441 : ERROR  table buy_info already exists
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE payment_detail
        (
          id             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
          buy_id         INTEGER,
          payment_method INT,
          paid           INT(18, 2),
          unpaid         INT(18, 2),
          create_time    VARCHAR(50),
          create_op      VARCHAR(50),
          refund_type    INTEGER,
          supplier_id    INTEGER,
          note           VARCHAR(200)
        )
        
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 447 : ERROR  table payment_detail already exists
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
          CREATE TABLE Sales
            (
              id           VARCHAR(35),
              userId       INTEGER      NOT NULL,
              code         VARCHAR(100) NOT NULL,
              pcId         VARCHAR(32)  NOT NULL,
              pcSign       VARCHAR(32)  NOT NULL,
              service_id   INTEGER,
              project      VARCHAR(50)  NOT NULL,
              workerId     INTEGER      NOT NULL,
              workerName   VARCHAR(20)  NOT NULL,
              carId        VARCHAR(10)  NOT NULL,
              carUser      VARCHAR(50),
              carPhone     VARCHAR(50),
              carModel     VARCHAR(30),
              createdTime  DATETIME     NOT NULL,
              orderNo      VARCHAR(32)  NOT NULL,
              orderCheckId VARCHAR(32)  NOT NULL,
              unit         VARCHAR(20),
              unit_price   VARCHAR(30),
              number       INTEGER,
              subtotal     INTEGER,
              total        INTEGER,
              note         TEXT,
              sale_date    VARCHAR(50),
              attribute    TEXT,
              sale_id      INTEGER PRIMARY KEY AUTOINCREMENT
            )
            
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 453 : ERROR  table Sales already exists
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE return_visit
          (id INTEGER PRIMARY KEY AUTOINCREMENT,
           create_Time DATETIME NOT NULL ,
           next_visit_time DATETIME NOT NULL ,
           phone VARCHAR(50) NOT NULL ,
           carId VARCHAR(10) NOT NULL ,
           username VARCHAR(50) NOT NULL ,
           state VARCHAR (2) NOT NULL
          )
    
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 459 : ERROR  table return_visit already exists
2018-01-20 Saturday 20:44:15  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
        CREATE TABLE supplier
        (
          id            INTEGER PRIMARY KEY AUTOINCREMENT,
          supplier_name VARCHAR NOT NULL,
          unpaid        INT(18,2) DEFAULT 0.0,
          create_time   VARCHAR(50),
          create_op     INTEGER,
          delete_state  INT DEFAULT 0 NOT NULL
        )
        
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 464 : ERROR  table supplier already exists
2018-01-20 Saturday 20:44:15  init_database.py.init_database.create_all_table: 467 : INFO  Table created successfully
2018-01-20 Saturday 20:44:16  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 20:44:16  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:17  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, USERNAME, PWD FROM Admin WHERE USERNAME='admin'
2018-01-20 Saturday 20:44:17  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:17  web.py.web.run_tornado: 27 : INFO  Web server 启动中...
2018-01-20 Saturday 20:44:17  socket.py.socket.server_handle: 24 : INFO  客户端线程已经启动 , 等待其它客户端连接
2018-01-20 Saturday 20:44:17  web.py.web.run_tornado: 29 : INFO  Web server 已启动，监听端口：15775
2018-01-20 Saturday 20:44:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:44:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 2 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:44:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:44:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:20  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:44:20  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:20  main_view.py.main_view._tab_show: 271 : INFO  add tab：history_buy
2018-01-20 Saturday 20:44:29  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_name like '%%'
                          AND si.brand_name like '%马牌%'
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 20:44:29  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 1 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:44:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:44:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sp.supplier_name,
                       si.brand_name,
                       si.model_name,
                       avg(bi.unit_price) avg_price,
                       count(1)           buy_times,
                       sum(bi.number)     total_number
                  FROM buy_info bi,
                       stock_info si,
                       supplier sp
                 WHERE bi.stock_id = si.id
                   AND si.model_id = 1
                   AND bi.buy_type = 1
                   AND bi.supplier_id = sp.id
                 GROUP BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
                 ORDER BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
               
2018-01-20 Saturday 20:44:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:32  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 1
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 20:44:32  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 1
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 20:44:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:33  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 1
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 20:44:33  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:34  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sp.supplier_name,
                       si.brand_name,
                       si.model_name,
                       avg(bi.unit_price) avg_price,
                       count(1)           buy_times,
                       sum(bi.number)     total_number
                  FROM buy_info bi,
                       stock_info si,
                       supplier sp
                 WHERE bi.stock_id = si.id
                   AND si.model_id = 1
                   AND bi.buy_type = 1
                   AND bi.supplier_id = sp.id
                 GROUP BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
                 ORDER BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
               
2018-01-20 Saturday 20:44:34  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:35  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 1
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 20:44:35  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:36  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sp.supplier_name,
                       si.brand_name,
                       si.model_name,
                       avg(bi.unit_price) avg_price,
                       count(1)           buy_times,
                       sum(bi.number)     total_number
                  FROM buy_info bi,
                       stock_info si,
                       supplier sp
                 WHERE bi.stock_id = si.id
                   AND si.model_id = 1
                   AND bi.buy_type = 1
                   AND bi.supplier_id = sp.id
                 GROUP BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
                 ORDER BY sp.supplier_name,
                          si.brand_name,
                          si.model_name
               
2018-01-20 Saturday 20:44:36  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:37  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 1
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 20:44:37  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, MODEL_NAME FROM model WHERE DELETE_STATE = 0 AND brand_id = 3 ORDER BY MODEL_NAME
2018-01-20 Saturday 20:44:40  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:40  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT ID, BRAND_NAME FROM brand WHERE DELETE_STATE = 0 ORDER BY BRAND_NAME
2018-01-20 Saturday 20:44:40  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:44:41  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       sts.brand_id,
                       sts.model_id,
                       sts.brand_name,
                       sts.model_name,
                       min_price,
                       avg_price,
                       lbi.unit_price
                  FROM (
                       SELECT
                              si.brand_id,
                              si.model_id,
                              si.brand_name,
                              si.model_name,
                              min(bi.unit_price) min_price,
                              avg(bi.unit_price) avg_price,
                              max(bi.id)         max_id
                         FROM buy_info bi,
                              stock_info si
                        WHERE bi.stock_id = si.id
                          AND si.model_id = 3
                          AND bi.buy_type = 1
                        GROUP BY si.brand_name, si.model_name
                     ) sts,
                       buy_info lbi
                 WHERE lbi.id = max_id
2018-01-20 Saturday 20:44:41  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:49:18  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT id,username,carId,phone,next_visit_time
                    FROM return_visit
                   WHERE state=0
                     AND next_visit_time <= '2018-01-20 23:59:59' 
                  ORDER BY create_time DESC 
2018-01-20 Saturday 20:49:18  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:49:18  main_view.py.main_view._tab_show: 271 : INFO  add tab：return_visit
2018-01-20 Saturday 20:49:21  main_view.py.main_view._tab_show: 271 : INFO  add tab：return_visit
2018-01-20 Saturday 20:49:22  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
                SELECT
                       id,
                       supplier_name,
                       sp.unpaid
                  FROM supplier sp
                 WHERE sp.unpaid > 0.0
                 GROUP BY id, supplier_name
                 ORDER BY supplier_name
2018-01-20 Saturday 20:49:22  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:49:22  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 2
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 20:49:22  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:49:22  main_view.py.main_view._tab_show: 271 : INFO  add tab：supplier_arrears
2018-01-20 Saturday 20:49:24  main_view.py.main_view._tab_show: 271 : INFO  add tab：supplier_arrears
2018-01-20 Saturday 20:49:25  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 2
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 20:49:25  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:49:25  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：
               SELECT
                      bi.buy_date,                      
                      si.brand_name,
                      si.model_name,
                      bi.number,
                      si.unit,
                      bi.unit_price,
                      bi.total,
                      bi.paid,
                      bi.unpaid,
                      bi.id
                 FROM buy_info bi, stock_info si, supplier sl
                WHERE bi.stock_id = si.id
                  AND bi.supplier_id = sl.id
                  AND bi.unpaid > 0.0
                  AND sl.id = 1
                  AND bi.buy_type = 1
                ORDER BY buy_date
2018-01-20 Saturday 20:49:25  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:49:28  main_view.py.main_view._tab_show: 271 : INFO  add tab：local_sale
2018-01-20 Saturday 20:49:30  db_connection.py.db_connection.execute: 53 : INFO  执行SQL脚本：SELECT orderNo,
                               createdTime,
                               pcSign,
                               carId,
                               carUser,
                               carPhone,
                               carModel,
                               workerName,
                               project,
                               attribute,
                               orderCheckId,
                               id
                          FROM Sales
                         WHERE createdTime BETWEEN '2018-01-01 00:00:00' and '2018-12-31 23:59:59'
                         ORDER BY createdTime DESC 
2018-01-20 Saturday 20:49:30  db_connection.py.db_connection.execute: 68 : INFO  SQL执行成功
2018-01-20 Saturday 20:49:33  common.py.common.ClientClose: 154 : ERROR  Scheduler is not running
2018-01-20 Saturday 20:49:33  socket.py.socket.server_handle: 29 : ERROR  [Errno 9] Bad file descriptor
2018-01-20 Saturday 20:49:33  socket.py.socket.server_handle: 30 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/server/socket.py", line 27, in server_handle
    data, addr = myClient.recvfrom(BUFSIZ)
OSError: [Errno 9] Bad file descriptor

2018-01-20 Saturday 20:49:33  common.py.common.ClientClose: 155 : ERROR  traceback.format_exc():
Traceback (most recent call last):
  File "/Users/zhou/PycharmProjects/Py-store/common/common.py", line 152, in ClientClose
    config.scheduler.shutdown()
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/apscheduler/schedulers/blocking.py", line 22, in shutdown
    super(BlockingScheduler, self).shutdown(wait)
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/apscheduler/schedulers/base.py", line 176, in shutdown
    raise SchedulerNotRunningError
apscheduler.schedulers.SchedulerNotRunningError: Scheduler is not running

